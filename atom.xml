<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wind13&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wind13.github.io/"/>
  <updated>2018-03-05T04:13:14.000Z</updated>
  <id>http://wind13.github.io/</id>
  
  <author>
    <name>Simon J S Wind13 Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么说一个全新的操作系统是必要的？</title>
    <link href="http://wind13.github.io/2018/03/05/why-new-os-zh/"/>
    <id>http://wind13.github.io/2018/03/05/why-new-os-zh/</id>
    <published>2018-03-05T04:12:25.000Z</published>
    <updated>2018-03-05T04:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>注：此文是 OSv 官网介绍的文章，感觉对于理解 OSv 很有帮助，特翻译如下，<a href="http://osv.io/why-new-os/" target="_blank" rel="noopener">原文地址</a></p><p>Today’s cloud-based applications run a heavyweight stack: the hypervisor, which divides the hardware resources among virtual machines; the operating system, which divides the virtual machine’s resources among applications; and the application server, which divides the application’s resources among the end users.</p><p>当今的云应用都运行在一个非常重的技术栈上： Hypervisor (虚拟机管理程序) ，要将硬件资源从虚拟机中分离； OS 操作系统，要将虚拟机从应用中分离； App Server 应用服务，要将应用资源从终端用户处分离。</p><p>Clearly, there is a lot of duplication going on. Each layer adds its own overhead in an attempt to abstract away and hide the problems caused by the lower layer. The result is inefficient and complex.</p><p>很明显，这中间有很多的重复。每一层都添加了额外的开销用来抽象和隐藏低一层所产生的问题。结果是低效和复杂的。</p><p>Enter OSv - the operating system for the cloud. On the one hand, designed and optimized to run on a hypervisor. On the other hand, designed to run an application stack without getting in the way. Designed for the cloud.</p><p>来到 OSv —— 专为云而生的操作系统。一方面，它是专为虚拟机管理而设计和优化的。另一方面，专为无障碍地运行整个应用（包括 OS 系统）。专为云设计。</p><h2 id="It’s-cloudy-out-there-and-we-love-it"><a href="#It’s-cloudy-out-there-and-we-love-it" class="headerlink" title="It’s cloudy out there and we love it"></a>It’s cloudy out there and we love it</h2><h2 id="它就在云上，我们喜欢它！"><a href="#它就在云上，我们喜欢它！" class="headerlink" title="它就在云上，我们喜欢它！"></a>它就在云上，我们喜欢它！</h2><p>The public cloud era opens new horizons and opportunities for hi-tech businesses. Virtualization is dominant, resources are evergreen and agility is the key. The role of the OS in this form changes. The need to massively scale out forces developers to run multiple copies of identical Virtual Machines (VMs). VMs are the new process that needs to be lightweight, blazing fast, scalable and cheap. DevOps and PaaS solutions bypass the OS and allow developers to deploy their code directly to the cloud. All these goodies are rapidly penetrating the enterprise space with matching private cloud capabilities and virtual appliances that act as bridges to the public cloud</p><p>公有云时代为高科技企业展开了全新的视野和机会。虚拟机占到了主导地位，资源的快速响应和持久在线是关键。而操作系统 OS 的角色在这样的情况下也有所改变。大规模扩展的需求迫使开发人员同时要运行多个相同的虚拟机（VM）。 VMs 是一个需要轻量级、快速、可扩展和廉价的新流程。DevOps 和 PaaS 解决方案绕过操作系统，允许开发者将代码直接放到云上。所有这些优点都迅速渗透到企业空间中，并提供了与公有云相匹配的私有云功能和虚拟设备。</p><h2 id="Virtualization-2-0"><a href="#Virtualization-2-0" class="headerlink" title="Virtualization 2.0"></a>Virtualization 2.0</h2><h2 id="虚拟化-2-0"><a href="#虚拟化-2-0" class="headerlink" title="虚拟化 2.0"></a>虚拟化 2.0</h2><p>VMware had brought virtualization into the x86 world (recall that virtualization was introduced by IBM’s mainframes in the 70s). While VMware has done a fantastic job shifting the enterprise from physical to virtual, it stopped there. Amazon Web Services had wider vision; Amazon do not use terminology such as virtual machine. Amazon sees the entire user workload and solves scaling issues.</p><p>VMware 将虚拟化引入到了 x86 型机的世界（记得虚拟化是由IBM的大型机在上世纪70年代引入的概念）。虽然 VMware 做了一项出色的工作，将企业从物理机带入虚拟机世界，但它也就止步于此。 而 Amazon 网络服务则有更广阔的视野； Amazon 不使用诸如虚拟机之类的术语。 Amazon 看到了用户整个的工作负载并解决了缩放问题。 </p><p>The right(tm) way - the new world is compose out of the smallest building blocks possible, running in clusters of multiple VMs. Common components are NoSQL databases, MemCacheD, front end webservers, backend webservers, etc. One single application is hosted within the virtual machine. That application uses a fraction of the guest OS capabilities - there is no hardware as the hypervisor owns that, there are no real users as this is a server, there are no other apps to schedule. Users pay for CPU cycles they don’t really need and need to maintain and tune a full blown generic OS.</p><p>正确（TM）的方式 —— 新的世界是由尽可能小的积木组成，运行在多个虚拟机集群中。 常见的组件是 NoSQL 数据库，缓存，前端 Web 服务器，后台服务器等，单个应用程序托管在虚拟机内。该应用程序使用了客户机操作系统功能的一小部分——没有 Hypervisor (虚拟机管理程序) 中的硬件，没有真正的用户，因为这是一个服务器，没有其他应用程序需要去调度。 所以用户不必为他们并不真正需要的 CPU 损耗付费，也不必维护和调整一个完整的通用操作系统。 </p><p>Unlike new infrastructure such as hypervisors, NoSQL, PaaS, etc, the operating system hasn’t changed much. The same OS image that powers physical machines, from tiny embedded devices to room-size top500 supercomputers, is also used in the cloud.</p><p>不象新的基础设施如 Hypervisors 虚拟机管理程序，NoSQL，PaaS 等，操作系统并没有太大变化。 与之相同的实现了物理机功能的操作系统映像 (从小型嵌入式设备的房间大小的TOP500超级计算机) 也都用在了云上。 </p><p>Typical cloud workloads run application servers using Java, Ruby, Python and JavaScript (node.js). This historical evolution is not ideal - Java, Linux and the hypervisor implement parallel/duplicated mechanisms for protection and abstraction. These mechanisms are redundant when combined, and impose a large overhead in terms of CPU and memory.</p><p>常见的云应用服务器使用 Java、Ruby、Python 和 JavaScript (node.js)。而这个历史演变过程实际并不理想 —— Java, Linux 和 Hypervisor (虚拟机管理程序) 为了保护和抽象而实现了并行或复制机制。这些机制在组合时是多余的，在 CPU 和内存方面强加了大量的开销。 </p><p>The management efforts needed to maintain Linux are extensive. Thousands of packages, multiple security updates, complex tuning and specialists to manage. It doesn’t stop in the OS level. JVM workloads require manual tuning in a variety of ways and VM templates and instances needs to be software managed by tools like Puppet and Chef.</p><p>维护 Linux 所需的管理工作是广泛的。 数千个包、多个安全更新、复杂的配置和专用列表需要管理。它不会停止在操作系统级别。JVM 工作负载需要以各种方式手动调优，VM 模板和实例也需要用像 Puppet 和 Chef 这样的工具软件来管理。 </p><p>These tools help to manage multiple OS configurations but if we’ll examine their operation on a single OS instance, we’ll discover that their roots go to the Unix OS of the 1970s. They’re based on pushing human configuration files and strings to /etc files. Typical OSs still do not have a fully automated API. OSv takes a simpler approach, with a common REST API for all configuration and data collection.</p><p>这些工具有助于管理多个操作系统配置， 但如果我们在一个操作系统实例上检查它们的操作，我们会发现它们根本是在 20 世纪 70 年代的 UNIX 操作系统上建立的， 它们是基于将人为的配置文件和字符串入到 /etc 文件目录中来实现的。 常见的操作系统仍然没有完全自动化的 API 。而 OSv 则是用一个简单的方法，用一个共同的 REST API 来完成所有的配置和数据采集。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注：此文是 OSv 官网介绍的文章，感觉对于理解 OSv 很有帮助，特翻译如下，&lt;a href=&quot;http://osv.io/why-new-os/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Today’s cloud-
      
    
    </summary>
    
    
      <category term="Hypervisor" scheme="http://wind13.github.io/tags/Hypervisor/"/>
    
      <category term="OSv" scheme="http://wind13.github.io/tags/OSv/"/>
    
  </entry>
  
  <entry>
    <title>SVG 相关学习</title>
    <link href="http://wind13.github.io/2018/02/10/SVG-%E7%9B%B8%E5%85%B3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wind13.github.io/2018/02/10/SVG-相关学习/</id>
    <published>2018-02-10T11:32:40.000Z</published>
    <updated>2018-02-28T04:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-library"><a href="#JavaScript-library" class="headerlink" title="JavaScript library"></a>JavaScript library</h2><ul><li><a href="http://svgjs.com/" target="_blank" rel="noopener">SVG.js</a> The lightweight library for manipulating and animating SVG.</li><li><a href="https://bonsaijs.org/" target="_blank" rel="noopener">Bonsai</a> A lightweight graphics library with an intuitive graphics API and an SVG renderer.</li><li><a href="http://snapsvg.io/" target="_blank" rel="noopener">Snap.svg</a> The JavaScript SVG library for the modern web</li></ul><h2 id="Draw-library"><a href="#Draw-library" class="headerlink" title="Draw library"></a>Draw library</h2><ul><li><a href="http://sc.chinaz.com/info/150826129135.htm" target="_blank" rel="noopener">15个最佳SVG的JavaScript库</a></li><li><a href="https://segmentfault.com/q/1010000002759556" target="_blank" rel="noopener">推荐 SVG 图标素材网站</a></li><li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">IconFont.cn</a> 国内图标库网站</li><li><a href="https://github.com/nullice/NViconsLib_Silhouette" target="_blank" rel="noopener">国内外社交网站矢量图标</a></li><li><a href="https://www.flaticon.com/" target="_blank" rel="noopener">FlatIcon</a> The largest database of free icons available in PNG, SVG, EPS, PSD and BASE 64 formats.</li><li><a href="https://worldvectorlogo.com/" target="_blank" rel="noopener">Worldvectorlogo</a> 矢量标志的所有品牌 完全免费和无限制</li></ul><h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><ul><li><a href="https://designer.io/" target="_blank" rel="noopener">Gravit Designer</a> 一款跨平台的设计工具，可以在 AppStore 中直接下载。新发现的，感觉不错，强烈推荐，需要英文门槛。 参考：<a href="http://www.sohu.com/a/205549958_99940811" target="_blank" rel="noopener">欢迎来到设计利器Gravit Designer的世界</a> </li><li><a href="https://www.wobastic.com/omber/" target="_blank" rel="noopener">Omber</a> 可制作图形和色彩渐变效果的工具，可在 AppStore 中直接下载。</li><li><a href="https://inkscape.org/zh/" target="_blank" rel="noopener">Inkscape</a> Draw Freely. 自油自画。跨系统，Linux 上也是首选。缺点：需要先安装<a href="https://www.xquartz.org/" target="_blank" rel="noopener">XQuartz</a>。</li><li><a href="https://vectr.com/" target="_blank" rel="noopener">Vectr</a> is a free graphics software used to create vector graphics easily and intuitively. It’s a simple yet powerful web and desktop cross-platform tool to bring your designs into reality. 可以在 AppStore 中直接下载。</li><li><a href="http://macsvg.org/" target="_blank" rel="noopener">macSVG</a> An open-source macOS app for designing HTML5 SVG art and animation. <a href="https://github.com/dsward2/macSVG" target="_blank" rel="noopener">Github repo</a></li><li><a href="https://www.calligra.org" target="_blank" rel="noopener">Calligra</a> part of the KDE community.</li><li><a href="http://glipssvgeditor.sourceforge.net/" target="_blank" rel="noopener">GlipsSvgEditor</a> An open source SVG graphics editor and a SCADA HMI editor. 似乎是(SCADA(Supervisory Control And Data Acquisition)系统，即数据采集与监视控制系统。)专业领域的画图工具，界面粗糙。</li><li><a href="http://latexdraw.sourceforge.net/" target="_blank" rel="noopener">LaTeXDraw</a> is a graphical drawing editor for LaTeX. LaTeXDraw can be used to 1) generate PSTricks code; 2) directly create PDF or PS pictures. LaTeXDraw is developed in Java and thus runs on top of Linux, Windows, and Mac OS X. You need Java 8 to launch LaTeXDraw.</li><li><a href="http://vectorpaint.yaks.co.nz/" target="_blank" rel="noopener">VectorPaint</a> Draw SVG online. 在线绘制工具。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaScript-library&quot;&gt;&lt;a href=&quot;#JavaScript-library&quot; class=&quot;headerlink&quot; title=&quot;JavaScript library&quot;&gt;&lt;/a&gt;JavaScript library&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="SVG" scheme="http://wind13.github.io/tags/SVG/"/>
    
      <category term="Graphic" scheme="http://wind13.github.io/tags/Graphic/"/>
    
      <category term="JavaScript" scheme="http://wind13.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习</title>
    <link href="http://wind13.github.io/2018/02/07/Docker-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wind13.github.io/2018/02/07/Docker-学习/</id>
    <published>2018-02-07T16:18:26.000Z</published>
    <updated>2018-03-05T01:55:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速入门心法"><a href="#快速入门心法" class="headerlink" title="快速入门心法"></a>快速入门心法</h2><p>官网文档也好，网上其他的教程也好，都非常有“耐心”，一点点地教你怎么理解和使用 docker，但我在看这些教程和文档的时候其实很着急，因为我只想快速入门并且用起来，而且最好是按最佳实践的路子用起来，而不是象个初学者那样慢慢摸索。但就是没人把这条捷径说清楚……</p><p>下面我就我所知道和理解的内容，写一点快速入门的心法：</p><ul><li>首先知道 docker 大概是个什么？<ul><li>就我的理解，直白地说：就是一个轻量的虚拟机，在一个基本的内核基础上，层层叠加出想要的虚拟机环境。</li><li>同时要注意一个重要概念，类似于微服务概念，每一个 docker 虚拟机里面一般只做一件事，只支持一个服务，例如： web 服务、 hexo 博客服务等；</li></ul></li><li>其次要知道拿 docker 来有什么用，最主要的用途在哪儿？<ul><li>目前就我的使用情况来说，就是一些开发部署环境在本机搭建起来很麻烦，不同的操作系统还有所不同，还要在本机安装一堆的包，还要在本机进行很多配置，而使用 docker 之后，就可以不用在本机安装了，本机干净了，又能快捷享用 docker 虚拟机中提供的服务。</li><li>保证应用项目在不同的主机上运行时一致，因为都是运行在 docker 中的，所以各种操作系统，各个电脑打开项目，只要正常安装了 docker 后，启动运行起来，都象是在 linux 中一样，因为 docker 虚拟机基本都是基于 linux 操作系统的。</li></ul></li><li>如何快速入门使用？<ul><li>首先要有一定的基础，否则会遇到太多阻碍，个人觉得是要对 linux 系统的基础操作和一些工作模式要有一定的熟悉和了解，特别是网络方面比较清楚会有比较大的帮助，另外了解 git 的使用流程和基本命令会比较有帮助，对于理解 docker 这种虚拟机的管理模式也会比较有帮助，当然有一定的编程基础，熟悉一些语言开发也是必须的，毕竟 docker 就是帮助开发部署环境用的。</li><li>快捷路线就是 docker-compose 了，别在 docker 命令上花费太多时间，只要把 docker 和 docker-compose 安装好后，就直接找一两个 docker-compose 构建的开源项目来尝试，运行 <code>docker-compose up</code> 就可以了，这本来也就是使用 docker 后最大的好处之一，只需要一个命令，有 docker 镜像就启动服务，没有就相应地创建或下载，总之不用操心怎么安装环境什么的。</li><li>另一个注意点是尽量选择那些以 alpine 为基础的镜像，文件占空间小。</li></ul></li></ul><p>以上只是心法，具体的知识和教程可参考下面的内容，网上也多得是：</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>传统虚拟机：虚拟硬件和完整的操作系统，再运行应用；<br>容器：运行于宿主的内核，没有自己的内核，没有硬件虚拟。</p><h3 id="Docker-包括三个基本概念，涉及-Docker-的整个生命周期。"><a href="#Docker-包括三个基本概念，涉及-Docker-的整个生命周期。" class="headerlink" title="Docker 包括三个基本概念，涉及 Docker 的整个生命周期。"></a>Docker 包括三个基本概念，涉及 Docker 的整个生命周期。</h3><ul><li>镜像（Image）[类]：由多层文件系统联合组成，支持容器运行和配置参数，无动态数据。</li><li>容器（Container）[实例]：运行于独立命名空间的进程，以镜像为基础层，之上是容器存储层（会随容器消亡）。数据卷不会消亡。容器是拥有不同 IP 地址从而使其成为网络上可识别的独立 Linux 进程。容器依赖于镜像，如果想删除某个镜像，必须先删除相应的容器。</li><li>仓库（Repository）：Docker Registry =&gt; Repository =&gt; Tag == Image，”repository:tag”，一个镜像可以对应多个标签 tag。</li><li>虚悬镜像（Dangling image）：<code>docker pull</code> 或 <code>docker build</code> 导致标签指向新镜像，旧的无标签镜像变成虚悬镜像。</li><li>黑箱镜像：使用 docker commit 意味着所有对镜像的操作都是黑箱操作，生成的镜像也被称为黑箱镜像。</li><li>数据卷：volume</li></ul><h3 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h3><p>强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 –link 参数。</p><h4 id="创建一个新的-Docker-网络"><a href="#创建一个新的-Docker-网络" class="headerlink" title="创建一个新的 Docker 网络"></a>创建一个新的 Docker 网络</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge my-net</span><br></pre></td></tr></table></figure><h2 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h2><p>使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><p>docker主命令不要用后台运行，容器就是为了主进程而存在的，主进程退出，容器就失去了存在的意义，从而退出。正确的做法是直接执行 nginx 可执行文件，并且要求以前台形式运行。比如：</p><p><code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></p><h3 id="Docker-run-详解"><a href="#Docker-run-详解" class="headerlink" title="Docker run 详解"></a>Docker run 详解</h3><p>当利用 docker run 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h3 id="Docker-Registry-公开服务"><a href="#Docker-Registry-公开服务" class="headerlink" title="Docker Registry 公开服务"></a>Docker Registry 公开服务</h3><p>镜像服务被称为<strong>加速器</strong>。常见的有 <a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云加速器</a>、<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud 加速器</a> 等。</p><p>国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://hub.tenxcloud.com/" target="_blank" rel="noopener">时速云镜像仓库</a>、<a href="https://c.163.com/hub#/m/library/" target="_blank" rel="noopener">网易云镜像服务</a>、<a href="https://hub.daocloud.io/" target="_blank" rel="noopener">DaoCloud 镜像市场</a>、<a href="https://cr.console.aliyun.com" target="_blank" rel="noopener">阿里云镜像库</a> 等。</p><h2 id="docker-编译一个-Dockerfile"><a href="#docker-编译一个-Dockerfile" class="headerlink" title="docker 编译一个 Dockerfile"></a>docker 编译一个 Dockerfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyhello .</span><br></pre></td></tr></table></figure><h2 id="列出系统中的所有镜像："><a href="#列出系统中的所有镜像：" class="headerlink" title="列出系统中的所有镜像："></a>列出系统中的所有镜像：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID</span><br><span class="line">friendlyhello         latest              326387cea398</span><br></pre></td></tr></table></figure><h2 id="删除所有虚悬镜像："><a href="#删除所有虚悬镜像：" class="headerlink" title="删除所有虚悬镜像："></a>删除所有虚悬镜像：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><h2 id="删除所有无主的数据卷："><a href="#删除所有无主的数据卷：" class="headerlink" title="删除所有无主的数据卷："></a>删除所有无主的数据卷：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure><h2 id="删除本地镜像："><a href="#删除本地镜像：" class="headerlink" title="删除本地镜像："></a>删除本地镜像：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br><span class="line"></span><br><span class="line"># 删除所有仓库名为 redis 的镜像</span><br><span class="line">docker image rm $(docker image ls -q redis)</span><br><span class="line"></span><br><span class="line"># 删除所有在 mongo:3.2 之前的镜像</span><br><span class="line">docker image rm $(docker image ls -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><h2 id="查看镜像的历史记录"><a href="#查看镜像的历史记录" class="headerlink" title="查看镜像的历史记录"></a>查看镜像的历史记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history ubuntu:latest</span><br></pre></td></tr></table></figure><h2 id="在某个端口映射下启动该镜像："><a href="#在某个端口映射下启动该镜像：" class="headerlink" title="在某个端口映射下启动该镜像："></a>在某个端口映射下启动该镜像：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 4000:80 friendlyhello</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm ubuntu:16.04 bash</span><br></pre></td></tr></table></figure><ul><li>-i：交互；</li><li>-t：终端；</li><li>–rm 容器退出后将其删除；</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用 nginx 镜像启动一个容器，命名为 webserver，并且映射了 80 端口</span><br><span class="line">docker run --name webserver -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><h2 id="查看映射端口配置"><a href="#查看映射端口配置" class="headerlink" title="查看映射端口配置"></a>查看映射端口配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port webserver</span><br></pre></td></tr></table></figure><h2 id="进入某个运行中的容器-bash"><a href="#进入某个运行中的容器-bash" class="headerlink" title="进入某个运行中的容器 bash"></a>进入某个运行中的容器 bash</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it webserver bash</span><br></pre></td></tr></table></figure><h2 id="查看镜像、容器、数据卷所占用的空间"><a href="#查看镜像、容器、数据卷所占用的空间" class="headerlink" title="查看镜像、容器、数据卷所占用的空间"></a>查看镜像、容器、数据卷所占用的空间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h2 id="列出系统中启动的容器："><a href="#列出系统中启动的容器：" class="headerlink" title="列出系统中启动的容器："></a>列出系统中启动的容器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED</span><br><span class="line">1fa4ab2cf395        friendlyhello       &quot;python app.py&quot;     28 seconds ago</span><br></pre></td></tr></table></figure><h2 id="关闭某个容器："><a href="#关闭某个容器：" class="headerlink" title="关闭某个容器："></a>关闭某个容器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop 1fa4ab2cf395</span><br></pre></td></tr></table></figure><h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stack ls                                            # List stacks or apps</span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  # Run the specified Compose file</span><br><span class="line">docker service ls                 # List running services associated with an app</span><br><span class="line">docker service ps &lt;service&gt;                  # List tasks associated with an app</span><br><span class="line">docker inspect &lt;task or container&gt;                   # Inspect task or container</span><br><span class="line">docker container ls -q                                      # List container IDs</span><br><span class="line">docker stack rm &lt;appname&gt;                             # Tear down an application</span><br><span class="line">docker swarm leave --force      # Take down a single node swarm from the manager</span><br></pre></td></tr></table></figure><h2 id="docker-命令帮助"><a href="#docker-命令帮助" class="headerlink" title="docker 命令帮助"></a>docker 命令帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">    attach    Attach to a running container                 <span class="comment"># 当前 shell 下 attach 连接指定运行镜像</span></span><br><span class="line">    build     Build an image from a Dockerfile              <span class="comment"># 通过 Dockerfile 定制镜像</span></span><br><span class="line">    commit    Create a new image from a container<span class="string">'s changes # 提交当前容器为新的镜像</span></span><br><span class="line"><span class="string">    cp        Copy files/folders from the containers filesystem to the host path</span></span><br><span class="line"><span class="string">              # 从容器中拷贝指定文件或者目录到宿主机中</span></span><br><span class="line"><span class="string">    create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span></span><br><span class="line"><span class="string">    diff      Inspect changes on a container'</span>s filesystem   <span class="comment"># 查看 docker 容器变化</span></span><br><span class="line">    events    Get real time events from the server          <span class="comment"># 从 docker 服务获取容器实时事件</span></span><br><span class="line">    <span class="built_in">exec</span>      Run a <span class="built_in">command</span> <span class="keyword">in</span> an existing container        <span class="comment"># 在已存在的容器上运行命令</span></span><br><span class="line">    <span class="built_in">export</span>    Stream the contents of a container as a tar archive   </span><br><span class="line">              <span class="comment"># 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span><br><span class="line">    <span class="built_in">history</span>   Show the <span class="built_in">history</span> of an image                  <span class="comment"># 展示一个镜像形成历史</span></span><br><span class="line">    images    List images                                   <span class="comment"># 列出系统当前镜像</span></span><br><span class="line">    import    Create a new filesystem image from the contents of a tarball  </span><br><span class="line">              <span class="comment"># 从tar包中的内容创建一个新的文件系统映像[对应 export]</span></span><br><span class="line">    info      Display system-wide information               <span class="comment"># 显示系统相关信息</span></span><br><span class="line">    inspect   Return low-level information on a container   <span class="comment"># 查看容器详细信息</span></span><br><span class="line">    <span class="built_in">kill</span>      Kill a running container                      <span class="comment"># kill 指定 docker 容器</span></span><br><span class="line">    load      Load an image from a tar archive              <span class="comment"># 从一个 tar 包中加载一个镜像[对应 save]</span></span><br><span class="line">    login     Register or Login to the docker registry server   </span><br><span class="line">              <span class="comment"># 注册或者登陆一个 docker 源服务器</span></span><br><span class="line">    <span class="built_in">logout</span>    Log out from a Docker registry server         <span class="comment"># 从当前 Docker registry 退出</span></span><br><span class="line">    logs      Fetch the logs of a container                 <span class="comment"># 输出当前容器日志信息</span></span><br><span class="line">    port      Lookup the public-facing port <span class="built_in">which</span> is NAT-ed to PRIVATE_PORT</span><br><span class="line">              <span class="comment"># 查看映射端口对应的容器内部源端口</span></span><br><span class="line">    pause     Pause all processes within a container        <span class="comment"># 暂停容器</span></span><br><span class="line">    ps        List containers                               <span class="comment"># 列出容器列表</span></span><br><span class="line">    pull      Pull an image or a repository from the docker registry server</span><br><span class="line">              <span class="comment"># 从docker镜像源服务器拉取指定镜像或者库镜像</span></span><br><span class="line">    push      Push an image or a repository to the docker registry server</span><br><span class="line">              <span class="comment"># 推送指定镜像或者库镜像至docker源服务器</span></span><br><span class="line">    restart   Restart a running container                   <span class="comment"># 重启运行的容器</span></span><br><span class="line">    rm        Remove one or more containers                 <span class="comment"># 移除一个或者多个容器</span></span><br><span class="line">    rmi       Remove one or more images                 </span><br><span class="line">              <span class="comment"># 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span><br><span class="line">    run       Run a <span class="built_in">command</span> <span class="keyword">in</span> a new container</span><br><span class="line">              <span class="comment"># 创建一个新的容器并运行一个命令</span></span><br><span class="line">    save      Save an image to a tar archive                <span class="comment"># 保存一个镜像为一个 tar 包[对应 load]</span></span><br><span class="line">    search    Search <span class="keyword">for</span> an image on the Docker Hub         <span class="comment"># 在 docker hub 中搜索镜像</span></span><br><span class="line">    start     Start a stopped containers                    <span class="comment"># 启动容器</span></span><br><span class="line">    stop      Stop a running containers                     <span class="comment"># 停止容器</span></span><br><span class="line">    tag       Tag an image into a repository                <span class="comment"># 给源中镜像打标签</span></span><br><span class="line">    top       Lookup the running processes of a container   <span class="comment"># 查看容器中运行的进程信息</span></span><br><span class="line">    unpause   Unpause a paused container                    <span class="comment"># 取消暂停容器</span></span><br><span class="line">    version   Show the docker version information           <span class="comment"># 查看 docker 版本号</span></span><br><span class="line">    <span class="built_in">wait</span>      Block until a container stops, <span class="keyword">then</span> <span class="built_in">print</span> its <span class="built_in">exit</span> code   </span><br><span class="line">              <span class="comment"># 截取容器停止时的退出状态值</span></span><br></pre></td></tr></table></figure><h2 id="Docker-高级网络工具和示例"><a href="#Docker-高级网络工具和示例" class="headerlink" title="Docker 高级网络工具和示例"></a>Docker 高级网络工具和示例</h2><p>在介绍自定义网络拓扑之前，你可能会对一些外部工具和例子感兴趣：</p><h3 id="pipework"><a href="#pipework" class="headerlink" title="pipework"></a>pipework</h3><p>Jérôme Petazzoni 编写了一个叫 <a href="https://github.com/jpetazzo/pipework" target="_blank" rel="noopener">pipework</a> 的 shell 脚本，可以帮助用户在比较复杂的场景中完成容器的连接。</p><h3 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h3><p>Brandon Rhodes 创建了一个提供完整的 Docker 容器网络拓扑管理的 <a href="https://github.com/brandon-rhodes/fopnp/tree/m/playground" target="_blank" rel="noopener">Python库</a>，包括路由、NAT 防火墙；以及一些提供 HTTP, SMTP, POP, IMAP, Telnet, SSH, FTP 的服务器。</p><h2 id="Docker-官方三剑客"><a href="#Docker-官方三剑客" class="headerlink" title="Docker 官方三剑客"></a>Docker 官方三剑客</h2><h3 id="Docker-Compose-项目"><a href="#Docker-Compose-项目" class="headerlink" title="Docker Compose 项目"></a>Docker Compose 项目</h3><ul><li>服务 (service)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (project)：由一组关联的应用容器组成的一个完整业务单元。</li></ul><h3 id="Docker-Machine-项目"><a href="#Docker-Machine-项目" class="headerlink" title="Docker Machine 项目"></a>Docker Machine 项目</h3><p>在多种平台上快速安装 Docker 环境，在 macOS 上安装 xhyve 虚拟机支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install docker-machine-driver-xhyve</span><br></pre></td></tr></table></figure><h3 id="Docker-Swarm-mode-项目"><a href="#Docker-Swarm-mode-项目" class="headerlink" title="Docker Swarm mode 项目"></a>Docker Swarm mode 项目</h3><p>提供 Docker 容器集群服务，具有容错能力的去中心化设计、内置服务发现、负载均衡、路由网格、动态伸缩、滚动更新、安全传输等。与 Kubernetes 是竞争关系。</p><ul><li><a href="http://dockone.io/article/1138" target="_blank" rel="noopener">巅峰对决之Swarm、Kubernetes、Mesos</a></li><li><a href="https://platform9.com/blog/kubernetes-docker-swarm-compared/" target="_blank" rel="noopener">Kubernetes vs Docker Swarm</a></li><li><a href="https://www.jianshu.com/p/07daa3a16878" target="_blank" rel="noopener">选择焦虑症のKubernetes 与 Docker Swarm</a></li></ul><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><h5 id="初始化一个-Swarm-集群："><a href="#初始化一个-Swarm-集群：" class="headerlink" title="初始化一个 Swarm 集群："></a>初始化一个 Swarm 集群：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.99.100</span><br><span class="line"></span><br><span class="line">Swarm initialized: current node (7t2kqs1cmbw3r54921y9ofdcu) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br></pre></td></tr></table></figure><p>docker swarm join –token SWMTKN-1-4l54p60fpaumw188uk5yea8l3z0sd80q6ydiav0e8r12w5cog1-8i70bpp0wtxggiemi2wx63f3g 192.168.99.100:2377<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">To add a manager to this swarm, run &apos;docker swarm join-token manager&apos; and follow the instructions.</span><br></pre></td></tr></table></figure></p><h6 id="添加一个虚拟机后，加入此-swarm-遇到如下报错："><a href="#添加一个虚拟机后，加入此-swarm-遇到如下报错：" class="headerlink" title="添加一个虚拟机后，加入此 swarm 遇到如下报错："></a>添加一个虚拟机后，加入此 swarm 遇到如下报错：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: rpc error: code = Unavailable desc = grpc: the connection is unavailable</span><br></pre></td></tr></table></figure><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><p>Kubernetes 是 Google 团队发起的开源项目，它的目标是管理跨多个主机的容器，提供基本的部署，维护以及运用伸缩，主要实现语言为 Go 语言。</p><p><code>Kubernetes</code> 实际上是一个希腊词κυβερνήτης，意思是”船的舵手”。 在这个意义上， Kubernetes 对于 Docker (集装箱船)倒是挺般配的。</p><ul><li><a href="https://blog.kelu.org/tech/2017/08/25/kubernetes-tutorial.html" target="_blank" rel="noopener">kubernetes 架构简介</a></li></ul><h2 id="OSv"><a href="#OSv" class="headerlink" title="OSv"></a>OSv</h2><p><a href="http://osv.io/" target="_blank" rel="noopener">OSv</a> is the open source operating system designed for the cloud.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速入门心法&quot;&gt;&lt;a href=&quot;#快速入门心法&quot; class=&quot;headerlink&quot; title=&quot;快速入门心法&quot;&gt;&lt;/a&gt;快速入门心法&lt;/h2&gt;&lt;p&gt;官网文档也好，网上其他的教程也好，都非常有“耐心”，一点点地教你怎么理解和使用 docker，但我在看这些教
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://wind13.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Computer Vision 学习</title>
    <link href="http://wind13.github.io/2018/02/07/Computer-Vision-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://wind13.github.io/2018/02/07/Computer-Vision-学习/</id>
    <published>2018-02-07T16:17:34.000Z</published>
    <updated>2018-03-05T02:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Computer-Vision-Library"><a href="#Computer-Vision-Library" class="headerlink" title="Computer Vision Library"></a>Computer Vision Library</h2><ul><li><a href="https://www.quora.com/What-are-pros-and-cons-of-OpenCV-and-TensorFlow-for-computer-vision" target="_blank" rel="noopener">What are pros and cons of OpenCV and TensorFlow for computer vision?</a></li><li><a href="http://libccv.org/" target="_blank" rel="noopener">ccv</a> A Modern Computer Vision Library</li><li><a href="http://simplecv.org/" target="_blank" rel="noopener">SimpleCV</a> Computer Vision platform using Python.</li><li><a href="https://cecas.clemson.edu/~stb/blepo/" target="_blank" rel="noopener">Blepo</a> Computer Vision Library</li><li><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python教程</a></li></ul><h2 id="OpenCV-vs-VXL-vs-LTI-Performance-Test"><a href="#OpenCV-vs-VXL-vs-LTI-Performance-Test" class="headerlink" title="OpenCV vs VXL vs LTI: Performance Test"></a>OpenCV vs VXL vs LTI: Performance Test</h2><blockquote><p>I recently read this comparison of four vision libraries: OpenCV, VXL, LTI and OpenCV with IPP. It was in the book Learning Learning OpenCV: Computer Vision with the OpenCV Library, authored by the creators of OpenCV themselves. For those who aren’t familiar with these libraries, here’s a brief introduction.</p></blockquote><h3 id="VXL"><a href="#VXL" class="headerlink" title="VXL"></a>VXL</h3><blockquote><p>VXL stands for Vision something Library. It is a C++ library that implements several common computer vision algorithms and related functionality. The idea is to replace the ‘X’ with one of the several letters:</p></blockquote><ul><li>VGL = Vision Geometry Library</li><li>VIL = Vision Image processing Library</li><li>VNL = Vision Numerics Library</li><li>VSL = Vision Streaming Library</li></ul><p>There are several other libraries as well</p><h3 id="LTI"><a href="#LTI" class="headerlink" title="LTI"></a>LTI</h3><blockquote><p>LTI-Lib is another object oriented library for computer vision. It has also been implemented in C++. It also includes classes that encapsulate multithreading, synchronization, serial port access, etc. And it ensures you don’t have to deal with changing operating systems or hardware.</p></blockquote><h3 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h3><blockquote><p>Yet another computer vision library. It includes over 500 functions for various commonly used algorithms. It also comes with a machine learning library and a portable window creation library. With version 2.0, OpenCV comes with a C++ interface as well. Before 2.0, it was only the C interface.</p></blockquote><h3 id="OpenCV-IPP"><a href="#OpenCV-IPP" class="headerlink" title="OpenCV + IPP"></a>OpenCV + IPP</h3><blockquote><p>OpenCV developers were friendly with the Intel Performance Primitives team. So, OpenCV makes use of IPP code (which is hand tuned and extremely optimized code) to speed up execution. And this, as you’ll see, gives a substantial boost to its execution speed.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Computer-Vision-Library&quot;&gt;&lt;a href=&quot;#Computer-Vision-Library&quot; class=&quot;headerlink&quot; title=&quot;Computer Vision Library&quot;&gt;&lt;/a&gt;Computer Vision L
      
    
    </summary>
    
    
      <category term="OpenCV" scheme="http://wind13.github.io/tags/OpenCV/"/>
    
      <category term="Computer Vision" scheme="http://wind13.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>两个 Lock 文件的迷惑</title>
    <link href="http://wind13.github.io/2018/01/24/two-lock-file-confuse/"/>
    <id>http://wind13.github.io/2018/01/24/two-lock-file-confuse/</id>
    <published>2018-01-24T16:54:08.000Z</published>
    <updated>2018-01-24T08:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>从 npm 5 开始，执行后就多出了一个 <code>package-lock.json</code> 的文件，如果在用 yarn 的话，就会有个疑惑，<code>yarn.lock</code> 和这个 <code>package-lock.json</code> 到底用哪个呢？要不要保存入 git 库呢？</p><p>通过参考这两个链接：</p><ul><li><a href="https://stackoverflow.com/questions/44552348/should-i-commit-yarn-lock-and-package-lock-json-files" target="_blank" rel="noopener">Should I commit yarn.lock and package-lock.json files?</a></li><li><a href="https://github.com/yarnpkg/yarn/issues/3614" target="_blank" rel="noopener">Idea: support package-lock.json from npm 5</a></li></ul><p>得到信息如下：</p><ul><li>都是为了记录准确的版本，使用时最好二选一，开发团队内部协商一致后，把另一种舍弃，即尽量不要用另一种并且在 <code>.gitignore</code> 中忽略掉。</li><li>有可能未来 yarn 会支持或兼容 <code>packge-lock.json</code>，等消息吧。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 npm 5 开始，执行后就多出了一个 &lt;code&gt;package-lock.json&lt;/code&gt; 的文件，如果在用 yarn 的话，就会有个疑惑，&lt;code&gt;yarn.lock&lt;/code&gt; 和这个 &lt;code&gt;package-lock.json&lt;/code&gt; 到底用
      
    
    </summary>
    
    
      <category term="yarn" scheme="http://wind13.github.io/tags/yarn/"/>
    
      <category term="npm" scheme="http://wind13.github.io/tags/npm/"/>
    
      <category term="package-lock.json" scheme="http://wind13.github.io/tags/package-lock-json/"/>
    
      <category term="yarn.lock" scheme="http://wind13.github.io/tags/yarn-lock/"/>
    
  </entry>
  
  <entry>
    <title>不沉迷电子游戏的心法</title>
    <link href="http://wind13.github.io/2018/01/23/fight-with-digital-games/"/>
    <id>http://wind13.github.io/2018/01/23/fight-with-digital-games/</id>
    <published>2018-01-23T16:46:21.000Z</published>
    <updated>2018-01-23T09:12:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>游戏估计是所有动物的本能吧，至少看上去是人类的本能了，从两三岁的小孩开始，就已经每天都在游戏了，而自从有了电子游戏之后，就出现了一种新的问题：沉迷电子游戏的问题。</p><p>个人也是沉迷“患者”，甚至目前也还是，一天的游戏时间加一起估计有5个小时左右，如果是周末不上班，则可能到10多个小时。自我感觉是需要改变了，所以写下这篇文章来反思这个问题。</p><p>不过我认为游戏甚至电子游戏本身并不是有百害而无一利的事物，不象吸毒抽烟那样，必须戒掉才好。毕竟游戏中是有其精彩的一面的，也有部分寓教于乐的成份的。所以只要不过度沉迷，实际也无伤大雅。</p><p>回到心法的角度来思考，为什么我们喜欢游戏？是因为在游戏中能得到什么吗？想要改变一种习惯或坏毛病，最好是能找到它的思想根源，然后在根源上用一件更好的习惯和事情来替换它。</p><p>我们喜欢玩游戏，玩电子游戏，最根本的不是因为喜欢玩电子游戏，电子游戏千千万万，并不是每一款我们都喜欢玩儿，很多时候打开一些不喜欢的电子游戏，我们也是提不起兴趣甚至是感到厌恶的。另一个现象就是，玩儿（沉迷）网络游戏的人远远比玩儿（沉迷）单机游戏的人多得多，甚至可以说几乎很少有人沉迷于某一款单机游戏，原因还是单机游戏本身是电脑 AI 来跟人玩儿，俗话说的就是死的，固定的，刻板的，当然随着人工智能的发展，也许未来的电脑智能也会不断提高，到时应该也许会有沉迷单机游戏的情况发生吧。人们还是更喜欢跟网络上的真人玩家玩儿网络游戏，这就反映了一个非常基本的需求：人与人之间的互动需求，这互动可能是聊天、对战竞技、合作成就等。</p><p>说到这里不得不提到几乎全民参与的游戏《王者荣耀》了，这款游戏之所以如此受欢迎，分析其中的根本原因有以下这些：</p><ul><li>与玩家对战竞技；</li><li>与队友合作配合；</li><li>成长路径、随机的奖励反馈；</li><li>更好的、更厉害的自己的虚拟投影——英雄系统；</li><li>不同个性、不同想象的虚拟形象，给人各种虚拟角色扮演的感觉；</li><li>手机操作，随时随地有网即可，零碎时间、无聊时间都可快速启动娱乐状态；</li><li>操作简单，上手容易，男女老少皆宜；</li><li>有历史传承，从早期的魔兽争霸、三国无双 到 Dota 到英雄联盟，再到手机上的王者荣耀，很多玩家一直追随下来；</li><li>英雄人物大众喜闻乐见，这也许也算是另一款腾讯的“全民超神”为什么远不如“王者荣耀”的原因之一吧；</li><li>游戏自身功能和体验制作得相当不错，包括还有语音、打字、快捷话语等沟通功能等，加上战队系统，使之不同于一般的游戏仅止于游戏而已，更是包含了一定的社交属性在其中。</li></ul><p>这么多的游戏元素集大成者，不火也难，再加上腾讯用户的基数，以及微信时代的传播效应，自然更是火借风势，一发而不可收拾。</p><p>个人还喜欢玩儿一些大型的网络游戏，比如刀剑2、龙之谷、暗黑3等，也都是类似的集合了这些元素的电子游戏，说到这儿我们就可以开始分析一下这背后的人的真实需求和沉迷的深层原因了。</p><ul><li>首先，人是有社交需求的；</li><li>其次，人是有自我实现需求的；</li><li><p>再次，经济规律会促使人们寻找最优性价比的解决方案的；解决以上两大需求，在现实中的成本通常很高，而通过电子游戏互联网，成本变得非常低、非常容易，因此这变成一种不可逆转的大趋势。相应的现象比如：</p><ul><li>人们更多地发微信而更少见面；</li><li>人们更多地远程开会、协作，而更少出差、实地办公；</li><li>人们更多地网上视频，而更少坐长途车来回探亲；</li><li>人们更多地网上购物，而更少逛多处商场选购商品；</li><li>人们更多地用视频监控，而更少亲自守夜监视等；</li></ul></li></ul><p>但无论怎么说，我们不希望自己沉迷于电子游戏的虚拟世界，我们希望适度地游戏娱乐，安排好生活和工作。所以，我们要找到避免沉迷这些电子游戏的方法。</p><h2 id="游戏上瘾的心结"><a href="#游戏上瘾的心结" class="headerlink" title="游戏上瘾的心结"></a>游戏上瘾的心结</h2><h3 id="现实中没有这么有意思的事儿"><a href="#现实中没有这么有意思的事儿" class="headerlink" title="现实中没有这么有意思的事儿"></a>现实中没有这么有意思的事儿</h3><h3 id="可以短暂地抛开现实中的烦恼"><a href="#可以短暂地抛开现实中的烦恼" class="headerlink" title="可以短暂地抛开现实中的烦恼"></a>可以短暂地抛开现实中的烦恼</h3><p>游戏上瘾的人通常在现实中也会同时伴有严重的拖延症，有个说法是说拖延其实不是病，不过拖延本身就是一个很大的话题，有无数的书在说这件事情，个人倒是认为拖延症和游戏上瘾可能有着相同的心理根源，如果找到并解决了，可能两个问题都会被解决。</p><h3 id="可以在虚拟的世界中体验自己想体验的过程"><a href="#可以在虚拟的世界中体验自己想体验的过程" class="headerlink" title="可以在虚拟的世界中体验自己想体验的过程"></a>可以在虚拟的世界中体验自己想体验的过程</h3><p>例如：建造一座城市、成为一个英雄、指挥一个大军。</p><h3 id="解决大脑中的各种强迫症"><a href="#解决大脑中的各种强迫症" class="headerlink" title="解决大脑中的各种强迫症"></a>解决大脑中的各种强迫症</h3><p>例如：把三个或多个连起来并消掉；拼成一排并消掉；</p><h3 id="朋友们都在玩儿"><a href="#朋友们都在玩儿" class="headerlink" title="朋友们都在玩儿"></a>朋友们都在玩儿</h3><p>喜欢玩儿的游戏，主要还是有朋友一起玩儿的才更感觉有趣，再好的游戏，如果没有人一起玩儿，也就失去了大半的乐趣，再无聊的游戏，也许就是因为有朋友一起玩儿也就觉得有趣的。</p><h3 id="我也需要娱乐"><a href="#我也需要娱乐" class="headerlink" title="我也需要娱乐"></a>我也需要娱乐</h3><p>通常都是在工作一天后，就觉得自己也需要找点娱乐的事情，电视、电影什么的偶尔遇到好的看一下，但更多的时候还是觉得玩游戏更有意思。</p><h3 id="现实中的事情都很慢很麻烦"><a href="#现实中的事情都很慢很麻烦" class="headerlink" title="现实中的事情都很慢很麻烦"></a>现实中的事情都很慢很麻烦</h3><p>游戏中只需要点点鼠标、按按键盘，再麻烦的也就是多点点鼠标和多按按键盘，虽然也有一些游戏的技巧，但毕竟游戏是设计出来给人玩儿的，所以肯定适应大多数人的操作和忍耐能力，而现实世界就不一样了，遵循的是现实世界的客观规律，所有事情都需要实事求是，很多真正有成就的事情都需要长期持久的耐心来慢慢实现，不象游戏或影视剧中一转眼十年就过去了……</p><h3 id="游戏的累积是可以看得见的"><a href="#游戏的累积是可以看得见的" class="headerlink" title="游戏的累积是可以看得见的"></a>游戏的累积是可以看得见的</h3><p>游戏中的各项数据都直观地显示给用户，即时评价给用户，同时大多数数据都是“永久”有效的，不断向上累积的，即使需要长时间积累的成就，也是可以期待的，任何时候上线还可以接续着之前的进度继续向前。</p><p>而现实世界则是看不到、摸不着的，没有数据可以直观告诉自己进度，甚至都不清楚会有哪些维度的数据要记录。同时，过程中也是感觉不进则退的，稍有懈怠就会感觉退回了从前，甚至从零开始一般。很多事情都会成为半途而废的失败记忆。</p><p><em>感悟：用一种方式在现实中给人一些数据、进度、里程碑、目标、任务计划等</em></p><h2 id="游戏与现实的逻辑区别"><a href="#游戏与现实的逻辑区别" class="headerlink" title="游戏与现实的逻辑区别"></a>游戏与现实的逻辑区别</h2><h3 id="时间、金钱、注意力"><a href="#时间、金钱、注意力" class="headerlink" title="时间、金钱、注意力"></a>时间、金钱、注意力</h3><ul><li>游戏中，用金钱来购买道具是游戏设计的主要目的之一，所以会尽可能地容易，游戏玩家购买道具通常是为了变得更强、更厉害，通常这些道具要么要耗费大量的时间才有可能得到，或者就是几乎没有几率（运气）得到，所以相当于在游戏中用金钱购买（节省）了自己的时间。</li><li>现实中，人们通常用自己的时间来换取金钱，当然为了生存必须如此，更高级的方式是用金钱来购买别人的时间，开成相互的交易。</li><li>游戏中，注意力通常是高度集中的，通常会让人专注于某一个任务或一系列具体的目标。</li><li>现实中，注意力通常是极其分散的，通常让人不知道要做什么，该做什么才好。</li></ul><p><em>感悟：用一种方式在现实中给人一些具体的大目标、小任务等</em></p><h3 id="大脑优势"><a href="#大脑优势" class="headerlink" title="大脑优势"></a>大脑优势</h3><ul><li>游戏中，体现的是人们的小聪明。</li><li>现实中，反映的是人们的大智慧。</li></ul><p><em>感悟：用一种方式在现实中创建大项目的概念，让人可以看得更长远，做事更持久。</em></p><h3 id="好运"><a href="#好运" class="headerlink" title="好运"></a>好运</h3><ul><li>游戏中，多数时候凭的是运气，玩儿的是概率和赌博。</li><li>现实中，更长远地要看人把握运势的眼光，比的是价值分析和持久专注。</li></ul><h3 id="成就感"><a href="#成就感" class="headerlink" title="成就感"></a>成就感</h3><p>成就感其实不是某种实物，不是金钱，甚至不是做成的某件事情，而是一种大脑自己想象出来的东西，可能是某种回忆（例如与队友在大逆风局里顶住压力，运用策略最终翻盘取胜等），某种脑子中的数字（例如游戏中的金子，在游戏中所构建的系统里，不断地玩儿，不断地熟悉，渐渐地就建立起来了某种价值感，于是乎在电脑里的这种小小的数字后面画一个小小的金子的图标就会让你感觉真的很值钱，甚至让你愿意为它而付出不断地努力挣取甚至打架争抢。）</p><p><em>感悟：记大账，可以大体反映出自己或家庭的财务状况即可</em></p><h2 id="初步的解决方案：管理好自己的注意力"><a href="#初步的解决方案：管理好自己的注意力" class="headerlink" title="初步的解决方案：管理好自己的注意力"></a>初步的解决方案：管理好自己的注意力</h2><p>有个朋友跟我说：你要转移你的注意力，没错，我想这是个办法，人在游戏的时候注意力全在游戏里，如果想控制自己的游戏时间，就需要把自己的注意力转移到别的地方，这样才能离开游戏。他的建议是出去抽根烟，哦，不是，因为我不抽烟，所以他的建议是陪孩子出去玩，去外面转转……</p><p>时间其实是没办法管理的，要想利用好时间，就要管理好自己的注意力，电子游戏虽然不是那么的十恶不郝，但也是要有所控制的，而要有所控制最初步的方式应该就是从转移注意力开始。</p><p>可是，我为什么会转移注意力呢？玩游戏之所以有时会失去控制，就是因为不愿意从这其中转移出来，沉迷其中感受特有的乐趣，甚至有时没什么乐趣，也依然好似强迫症一样地不停地做任务、打怪、升级……为什么呢？也许大脑有一种惯性，懒惰的惯性？在一件事情中找到了乐趣，就不停地想重复得到更多类似的乐趣？据说流行音乐也有类似的特性，就是一个旋律再重复一次，再稍加变化重复一次，最后再回归到最初的旋律再重复一次，人就会觉得很好听。</p><p>游戏其实可以给我们很多启示，设计游戏的机制，实际是非常讨好大脑的兴奋点的，我们要怎么样在现实中那些积极的事情上，也用心费力实现这些机制，让我们的人生、注意力、时间能更多地关注在这些积极的事情上呢？</p><p><em>感悟：在软件中加入任务、目标的价值，加入自己的精力值等参数，学习游戏的运行机制。</em><br><em>感悟：给想做的事情附加上独特的意义，并且最好有数据可衡量，可以直观地得到大脑中想象的成就感</em></p><p>我们沉迷游戏，最怕的是大脑进入到游戏的世界不能自拔，而玩游戏的最大乐趣恰恰在于进入其中的情境，未来的游戏发展只会更加的吸引人的注意力，更加的身临其境，摆脱沉迷游戏的关键点就是让大脑回到现实世界，思考现实世界的事物，冥想可能是比较有效的一个方法，帮助大脑更好地恢复平静，更好地明确人生的意义，而不再沉溺于游戏世界的愉悦和乐趣。</p><p>另外一项就是沉迷于工作，这样就用沉迷于其中一项代替了另一项，用工作代替游戏，这样沉迷工作可以带来更多的收益和成长，同时注意掌握好工作节奏，不至于过份劳累，就是一个可以长期持续的解决方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;游戏估计是所有动物的本能吧，至少看上去是人类的本能了，从两三岁的小孩开始，就已经每天都在游戏了，而自从有了电子游戏之后，就出现了一种新的问题
      
    
    </summary>
    
    
      <category term="games" scheme="http://wind13.github.io/tags/games/"/>
    
      <category term="游戏" scheme="http://wind13.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="注意力" scheme="http://wind13.github.io/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>2018年第一折腾</title>
    <link href="http://wind13.github.io/2018/01/23/2018%E5%B9%B4%E7%AC%AC%E4%B8%80%E6%8A%98%E8%85%BE/"/>
    <id>http://wind13.github.io/2018/01/23/2018年第一折腾/</id>
    <published>2018-01-23T16:19:50.000Z</published>
    <updated>2018-01-23T08:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>花了两天时间，绕了些弯路，总算把 Blog 搞得差不多满意了，用了 Next! 的主题，用了 hexo 的服务技术。</p><p>之前用的 JekyllBootstrap，本来还能凑合用，但是那个项目很长时间都没再维护更新了，仅有的几个主题也看烦了，影响了写博客和记录的心情，中间还转而去用一些笔记工具，用到高级功能又要收费，想来想去自己是搞软件开发的，为什么不再折腾一下呢？</p><p>太长时间没动过 Jekyll 和 Github page 相关的事儿了，导致前期过程做了些尝试和回忆的事情，经过这两天的折腾，明白了 Jekyll 和 Hexo 的工作机制，也算一项收获吧！</p><p>详细的折腾过程就懒得说了，给一些参考链接吧：</p><ul><li><a href="https://kangqingfei.cn/2015/12/30/from-jekyll-to-hexo/" target="_blank" rel="noopener">from jekyll to hexo</a></li><li><a href="http://www.cnblogs.com/jasondan/p/3499227.html" target="_blank" rel="noopener">将博客从jekyll迁移到了hexo</a></li><li><a href="https://jekyllrb.com/docs/templates/" target="_blank" rel="noopener">Jekyll uses the Liquid template</a></li><li><a href="http://theme-next.simpleyyt.com/" target="_blank" rel="noopener">Elegant Theme for Hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo 指令</a></li><li><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">hexo常用命令笔记</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;花了两天时间，绕了些弯路，总算把 Blog 搞得差不多满意了，用了 Next! 的主题，用了 hexo 的服务技术。&lt;/p&gt;
&lt;p&gt;之前用的 JekyllBootstrap，本来还能凑合用，但是那个项目很长时间都没再维护更新了，仅有的几个主题也看烦了，影响了写博客和记录的心
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://wind13.github.io/tags/hexo/"/>
    
      <category term="blog" scheme="http://wind13.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Wind13 的 Blog 之 原来的首页</title>
    <link href="http://wind13.github.io/2017/12/31/index/"/>
    <id>http://wind13.github.io/2017/12/31/index/</id>
    <published>2017-12-31T00:00:00.000Z</published>
    <updated>2018-02-09T02:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<!-- {*## 小工具或示例* [TOC疑云图小工具](/example/jsui/thinktools/#/cloud) （使用 AngularJS 开发）* [BSC权重小工具](/example/bscmin.html) （使用 EmberJS 开发）* [JSON 转 Table 的小工具](/example/json2table.html)*} --><h2 id="学用Play-和Scala做软件"><a href="#学用Play-和Scala做软件" class="headerlink" title="学用Play!和Scala做软件"></a>学用Play!和Scala做软件</h2><h3 id="本站收集Play1-x相关"><a href="#本站收集Play1-x相关" class="headerlink" title="本站收集Play1.x相关"></a>本站收集Play1.x相关</h3><ul><li><p><a href="!--￼0--">停止SSH，用Play!吧</a></p></li><li><p><a href="!--￼1--">Play!技巧问答</a></p></li><li><p><a href="!--￼2--">国内一些使用Play!框架的网站</a></p></li><li><p><a href="!--￼3--">Xml 域名空间识别问题</a></p></li></ul><a id="more"></a><ul><li><p><a href="http://liuu.iteye.com/blog/599129" target="_blank" rel="noopener">Playing Play!系列之一：Play框架的暴力美学</a></p></li><li><p><a href="http://liuu.iteye.com/blog/629586" target="_blank" rel="noopener">Playing Play!系列之二：再见Servlet，Play框架的启动</a></p></li><li><p><a href="http://liuu.iteye.com/blog/679437" target="_blank" rel="noopener">Playing Play!系列之三：不必Servlet3，Play框架的异步请求处理之道</a></p></li><li><p><a href="http://moshihao.com/?p=350" target="_blank" rel="noopener">playframework 学习实践(一) – Play框架概述</a></p></li><li><p><a href="http://moshihao.com/?p=359" target="_blank" rel="noopener">playframework 学习实践(二) – 搭建play开发环境</a></p></li><li><p><a href="http://moshihao.com/?p=388" target="_blank" rel="noopener">playframework 学习实践(三) – Hello World , play!</a></p></li><li><p><a href="http://moshihao.com/?p=399" target="_blank" rel="noopener">playframework 学习实践(四) – 配置你喜欢的IDE</a></p></li><li><p><a href="http://wind13.blog.163.com/blog/static/2482349201010171145628/" target="_blank" rel="noopener">Play framework 技巧记录</a></p></li><li><p><a href="http://wind13.blog.163.com/blog/static/248234920114462120998/" target="_blank" rel="noopener">Play framework 技巧记录 二</a></p></li></ul><h2 id="软件开发相关"><a href="#软件开发相关" class="headerlink" title="软件开发相关"></a>软件开发相关</h2><ul><li><p><a href="!--￼4--">编程知识链接收集</a></p></li><li><p><a href="!--￼5--">编程自学之路（个人建议供参考）</a></p></li></ul><h3 id="其他相关技术"><a href="#其他相关技术" class="headerlink" title="其他相关技术"></a><a href="!--￼6--">其他相关技术</a></h3><h2 id="管理相关知识"><a href="#管理相关知识" class="headerlink" title="管理相关知识"></a>管理相关知识</h2><p>管理从思想上来说是哲学的，从理论上来说是科学的，从操作上来说是艺术的。——余世维</p><ul><li><p><a href="!--￼7--">Toc术语</a></p></li><li><p><a href="!--￼8--">如何制定和落实一项有效的改善方案？</a></p></li><li><p><a href="!--￼9--">罗辑思维听后记录</a></p></li></ul><h2 id="常用在线工具"><a href="#常用在线工具" class="headerlink" title="常用在线工具"></a>常用在线工具</h2><ul><li><p><a href="http://tool.oschina.net/regex" target="_blank" rel="noopener">正则表达式测试</a></p></li><li><p><a href="http://tool.oschina.net/diff" target="_blank" rel="noopener">代码对比/归并</a></p></li><li><p><a href="http://tool.oschina.net/jscompress" target="_blank" rel="noopener">JS代码压缩</a></p></li><li><p><a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">BASE64编码解码</a></p></li><li><p><a href="http://tool.oschina.net/csv2tb" target="_blank" rel="noopener">CSV转HTML表格</a></p></li><li><p><a href="http://tool.oschina.net/codeformat/json" target="_blank" rel="noopener">JSON代码格式化</a></p></li><li><p><a href="http://tool.oschina.net/codeformat/js" target="_blank" rel="noopener">JS代码格式化</a></p></li></ul><h2 id="相关的网站"><a href="#相关的网站" class="headerlink" title="相关的网站"></a>相关的网站</h2><ul><li><p><a href="http://www.playframework.com" target="_blank" rel="noopener">Playframework官方网站</a>简洁明快，特别适合开发Web应用软件，1.2.5版本实践中…</p></li><li><p><a href="http://spray.io/" target="_blank" rel="noopener">Spray官方网站</a>一套值得关注的基于<a href="http://www.scala-lang.org/" target="_blank" rel="noopener">Scala</a>和<a href="http://akka.io/" target="_blank" rel="noopener">Akka</a>的轻量REST/HTTP解决方案。</p></li><li><p><a href="http://www.oopsplay.org" target="_blank" rel="noopener">中国Play官方社区</a></p></li><li><p><a href="http://cn.tanshuai.com/a/getting-started-scala-play" target="_blank" rel="noopener">关于Play2的一个非常好的入门教程</a></p></li><li><p><a href="http://www.scala-lang.org/" target="_blank" rel="noopener">Scala语言</a>，结合面向对象与函数式编程，更好地加强了软件的可扩展性，学习中……</p></li><li><p><a href="http://zh.scala-tour.com/#/welcome" target="_blank" rel="noopener">Scala指南</a></p></li><li><p><a href="https///github.com/playframework/play20/wiki">Play!2.0官方文档</a>，在github开源。</p></li><li><p><a href="http://play-framework.herokuapp.com/" target="_blank" rel="noopener">国内中文文档翻译</a>，Play!文档中文化QQ群：168013302，在兴趣的可以帮忙翻译</p></li><li><p><a href="https///github.com/hotplay/playframework-document-cn">在github上的项目网址</a></p></li><li><p><a href="http://code.google.com/p/play-cms/" target="_blank" rel="noopener">一个非常简单的内嵌CMS模块（play-cms module）</a></p></li></ul><h2 id="生活智慧"><a href="#生活智慧" class="headerlink" title="生活智慧"></a>生活智慧</h2><p><a href="wiki/FunnyClassic">有趣经典收集</a></p><h2 id="关于本站的一些说明"><a href="#关于本站的一些说明" class="headerlink" title="关于本站的一些说明"></a>关于本站的一些说明</h2><p>一切才刚刚开始，希望大家多支持……</p><p>如果您需要信息化方面一些好的解决方案，</p><p>请给我发邮件：wind13 AT 163 DOT com！</p><p>当然，你也可以说点别的……</p><p>环境保护，只要你是人类，就应该反思！从节约资源开始吧！<br>志同道合（<a href="http://coolshell.cn/articles/7186.html" target="_blank" rel="noopener">做个环保主义的程序员</a>）的技术博客：<a href="http://coolshell.cn/" target="_blank" rel="noopener">酷壳CoolShell</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- {*
## 小工具或示例

* [TOC疑云图小工具](/example/jsui/thinktools/#/cloud) （使用 AngularJS 开发）
* [BSC权重小工具](/example/bscmin.html) （使用 EmberJS 开发）
* [JSON 转 Table 的小工具](/example/json2table.html)

*} --&gt;
&lt;h2 id=&quot;学用Play-和Scala做软件&quot;&gt;&lt;a href=&quot;#学用Play-和Scala做软件&quot; class=&quot;headerlink&quot; title=&quot;学用Play!和Scala做软件&quot;&gt;&lt;/a&gt;学用Play!和Scala做软件&lt;/h2&gt;&lt;h3 id=&quot;本站收集Play1-x相关&quot;&gt;&lt;a href=&quot;#本站收集Play1-x相关&quot; class=&quot;headerlink&quot; title=&quot;本站收集Play1.x相关&quot;&gt;&lt;/a&gt;本站收集Play1.x相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;!--￼0--&quot;&gt;停止SSH，用Play!吧&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;!--￼1--&quot;&gt;Play!技巧问答&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;!--￼2--&quot;&gt;国内一些使用Play!框架的网站&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;!--￼3--&quot;&gt;Xml 域名空间识别问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Pages" scheme="http://wind13.github.io/categories/Pages/"/>
    
    
      <category term="wind13" scheme="http://wind13.github.io/tags/wind13/"/>
    
  </entry>
  
  <entry>
    <title>Playframework 1.4.x 与Playframework 2.5.x 选型比较</title>
    <link href="http://wind13.github.io/2017/02/23/play2x-compare-play1x/"/>
    <id>http://wind13.github.io/2017/02/23/play2x-compare-play1x/</id>
    <published>2017-02-23T00:00:00.000Z</published>
    <updated>2018-02-09T02:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Playframework-1-4-x-与Playframework-2-5-x-选型比较"><a href="#Playframework-1-4-x-与Playframework-2-5-x-选型比较" class="headerlink" title="Playframework 1.4.x 与Playframework 2.5.x 选型比较"></a>Playframework 1.4.x 与Playframework 2.5.x 选型比较</h1><h2 id="Playframework-2-5-x"><a href="#Playframework-2-5-x" class="headerlink" title="Playframework 2.5.x"></a>Playframework 2.5.x</h2><h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><ul><li>文档齐全，持续更新；</li><li>支持更多最新的技术，更清晰的底层技术；</li><li>完全异步的HTTP编程模型；</li><li>通过 Comet, long-polling and WebSockets 给客户端提供持续的连接；</li><li>通过 Akka 的 Actor 模型提供响应高并发的系统；</li><li>使用 Akka Streams<ul><li>Filters</li><li>Streaming response bodies</li><li>Request body parsers</li><li>WebSockets</li><li>Streaming WS client responses</li></ul></li><li>使用 Websocket</li><li>使用 Ebean 或 JPA 和 Anorm（用于Scala）作为数据层，Java 建议用 Ebean，<ul><li>Ebean 可以很容易<a href="http://ebean-orm.github.io/docs/features/elasticsearch/" target="_blank" rel="noopener">跟 ElasticSearch 结合</a>做全文检索相关功能。</li><li>Ebean <a href="https://github.com/playframework/play-ebean-example/blob/master/app/models/Computer.java" target="_blank" rel="noopener">服务端分页</a>极为容易。</li></ul></li><li>使用 <a href="https://www.playframework.com/documentation/2.5.x/JavaComet" target="_blank" rel="noopener">Comet sockets</a></li><li>使用更强大的 The Twirl template engine，即 Scala 的界面模板，<ul><li>模板是要编译的，编译前更早报错，报错更准确。</li><li>语法简洁，只有一个“@”特殊字符，借助强大的 Scala 语言功能更强大。</li><li>函数式编程的语法和表达式非常适合模板引擎。</li></ul></li><li>路由系统 routing system 也是编译的，帮助提早发现错误。</li><li>强大而易用的<a href="https://www.playframework.com/documentation/2.5.x/JavaTest" target="_blank" rel="noopener">自动化测试</a>系统。</li><li>采用 sbt 作为集成编译工具，可以很好地与 Maven 等传统工具结合，这样也就可以很好地和已有系统集成。</li><li>有很多的实际示例代码和模组 Module 可用，如下：<ul><li><a href="https://github.com/swagger-api/swagger-play" target="_blank" rel="noopener">swagger-play</a></li><li><a href="https://github.com/innoveit/play2-pdf" target="_blank" rel="noopener">PDF module</a></li><li><a href="https://edulify.github.io/play-geolocation-module.edulify.com/" target="_blank" rel="noopener">Geolocation</a></li></ul></li><li>很多方面都有针对性的优雅解决方案，如：<ul><li><a href="https://www.playframework.com/documentation/2.5.x/JavaCsrf" target="_blank" rel="noopener">CSRF</a></li><li><a href="https://www.playframework.com/documentation/2.5.x/JavaJsonActions" target="_blank" rel="noopener">JSON 转换</a> Play 2 使用的是 Jackson 而不是 google 的那个 gson。</li><li><a href="https://www.playframework.com/documentation/2.5.x/Evolutions" target="_blank" rel="noopener">Database Evolutions</a></li><li><a href="https://www.playframework.com/documentation/2.5.x/Deploying" target="_blank" rel="noopener">Deploy 部署</a> dist 命令很强大，直接打个zip包，解压后，运行 bin 目录下的 run 命令就可以启动服务了。甚至可以打成各个系统 Native 的安装包，如 <em>.msi (Windows), </em>.apk (macOS), *.rpm (Linux) 等</li></ul></li></ul><h3 id="劣势："><a href="#劣势：" class="headerlink" title="劣势："></a>劣势：</h3><ul><li>深入的功能，特别是 Akka 有一定的学习曲线。</li><li>Java 和 Scala 有界线，有两套API，不能自然转换，未来要用 Scala 则可能需要重写。</li></ul><h2 id="Playframework-1-4-x"><a href="#Playframework-1-4-x" class="headerlink" title="Playframework 1.4.x"></a>Playframework 1.4.x</h2><h3 id="优势：-1"><a href="#优势：-1" class="headerlink" title="优势："></a>优势：</h3><ul><li>有之前的项目经验，熟悉度高；</li><li>满足基本的项目需求，实现一般的（传统的）信息系统没有问题；</li><li>可用之前的项目快速起步，包括与 Swagger 等的结合，部署脚本文件等。</li></ul><h3 id="劣势：-1"><a href="#劣势：-1" class="headerlink" title="劣势："></a>劣势：</h3><ul><li>动态语言的 Groovy 界面模板，非编译型语言，仅在运行时才能知道错误，不易排查错误原因，解释型运行效率低。</li><li>太多黑科技，“不正规”地使用“正规”的 Java 技术，可能导致一些很难解决的Bug，包括与第三方 jar 包的兼容问题等。</li><li>项目采用 python 做为编译等工作的工具，不易自定义和集成已有系统。</li></ul><h2 id="结论：越看越觉得应该直接开始使用-Play-2-5-x-，没什么可担心的，只会更好，不会入坑！"><a href="#结论：越看越觉得应该直接开始使用-Play-2-5-x-，没什么可担心的，只会更好，不会入坑！" class="headerlink" title="结论：越看越觉得应该直接开始使用 Play 2.5.x ，没什么可担心的，只会更好，不会入坑！"></a>结论：越看越觉得应该直接开始使用 Play 2.5.x ，没什么可担心的，只会更好，不会入坑！</h2><ul><li>一般的应用，Play 2.5.x 与 Play 1.4.x 上手难度相当，甚至在<a href="https://www.playframework.com/documentation/2.5.x/JavaTest" target="_blank" rel="noopener">测试</a>、<a href="https://www.playframework.com/documentation/2.5.x/JavaForms" target="_blank" rel="noopener">Form表单</a>、Model层（Ebean）等方面 Play 2.5.x 更有优势，有更多更专业且现成的解决方案。</li><li>深层次的功能和配置等，更是Play2有所涉及（但需一定的学习曲线去掌握），而Play1就没有相关资料，只能借助第三方类库解决了，但跟Play1的结合又只能通过写它的Module来实现，麻烦情况可见一般。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Playframework-1-4-x-与Playframework-2-5-x-选型比较&quot;&gt;&lt;a href=&quot;#Playframework-1-4-x-与Playframework-2-5-x-选型比较&quot; class=&quot;headerlink&quot; title=&quot;Pl
      
    
    </summary>
    
      <category term="play2x" scheme="http://wind13.github.io/categories/play2x/"/>
    
    
      <category term="playframework" scheme="http://wind13.github.io/tags/playframework/"/>
    
      <category term="java" scheme="http://wind13.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>技术选型之我见</title>
    <link href="http://wind13.github.io/2017/02/05/tech-select/"/>
    <id>http://wind13.github.io/2017/02/05/tech-select/</id>
    <published>2017-02-05T00:00:00.000Z</published>
    <updated>2018-02-09T02:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>技术选型是各个技术团队架构师所面临的挑战之一，也是重要的决策之一，关系到团队技术发展的大方向，甚至决定着项目未来生存的生命力和寿命长短。</p><p>然而要做好这件选型的决策却是不那么简单，同时也没有什么特定的标准。</p><p>个人所见：</p><h2 id="首先，要见多识广；"><a href="#首先，要见多识广；" class="headerlink" title="首先，要见多识广；"></a>首先，要见多识广；</h2><p>既然是说选型，那就要有所选择，也就是说要能够博览众长，知道相关领域各式各样的技术方向，多看一些严谨的介绍文章和比较文章，做一些重点的笔记，毕竟精力是有限的，所以不可能每一个技术方向都深入研究，最终通常也只能选择三种左右来进行体验和原型测试等。<br>平时要多看新技术社区的文章，顺藤摸瓜地去发现新的技术动向，看它们的官网，看官方文档（英文阅读是基本功），看Demo等，不要迷信商业解决方案，更多地相信开源社区的力量，关注人气较高的开源社区，注意看有些开源项目有可能维护较少或者bug较多（查看Issue列表页），那就不能轻易使用。</p><h2 id="其次，要实事求是；"><a href="#其次，要实事求是；" class="headerlink" title="其次，要实事求是；"></a>其次，要实事求是；</h2><h2 id="最后，要勇于冒险；"><a href="#最后，要勇于冒险；" class="headerlink" title="最后，要勇于冒险；"></a>最后，要勇于冒险；</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;技术选型是各个技术团队架构师所面临的挑战之一，也是重要的决策之一，关系到团队技术发展的大方向，甚至决定着项目未来生存的生命力和寿命长短。&lt;/p&gt;
&lt;p&gt;然而要做好这件选型的决策却是不那么简单，同时也没有什么特定的标准。&lt;/p&gt;
&lt;p&gt;个人所见：&lt;/p&gt;
&lt;h2 id=&quot;首先
      
    
    </summary>
    
      <category term="manage agile" scheme="http://wind13.github.io/categories/manage-agile/"/>
    
    
      <category term="architect" scheme="http://wind13.github.io/tags/architect/"/>
    
  </entry>
  
  <entry>
    <title>DevOps技术相关</title>
    <link href="http://wind13.github.io/2016/12/18/devops-collection/"/>
    <id>http://wind13.github.io/2016/12/18/devops-collection/</id>
    <published>2016-12-18T00:00:00.000Z</published>
    <updated>2016-12-17T19:09:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DevOps技术相关"><a href="#DevOps技术相关" class="headerlink" title="DevOps技术相关"></a>DevOps技术相关</h1><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul><li><a href="http://www.ansible.com.cn/" target="_blank" rel="noopener">Ansible中文权威指南</a> 所有重复的IT工作可以被自动化并分享给其他组员。</li><li><a href="https://gist.github.com/jaceklaskowski/bd3d06489ec004af6ed9" target="_blank" rel="noopener">Choosing a deployment tool - ansible vs puppet vs chef vs salt</a></li></ul><h2 id="相关观点"><a href="#相关观点" class="headerlink" title="相关观点"></a>相关观点</h2><ul><li>Puppet is a similar tool to Chef</li><li>Vagrant is a tool for developers and a toy for admins, you can quickly stand up a development environment with vagrant, e.g. I want to develop an android app, grab an IDE from vagrant, I think it will be overtaken by Docker soon.</li><li>我现在使用的是阿里容器服务: <a href="https://cs.console.aliyun.com" target="_blank" rel="noopener">https://cs.console.aliyun.com</a> ，配合阿里的虚拟主机以及代码托管(code.aliyun.com)，实在不能再方便。</li><li>创业圈的docker服务，我比较推荐<a href="http://daocloud.io，很久以前我还去他们家上海总部做过使用开发demo，这是一家很有工程师文化的企业，而且里面确实有好几个国内docker界顶级玩家。" target="_blank" rel="noopener">http://daocloud.io，很久以前我还去他们家上海总部做过使用开发demo，这是一家很有工程师文化的企业，而且里面确实有好几个国内docker界顶级玩家。</a></li><li>假如你用的是VPS或者AWS什么的 首选Rex <a href="http://rexify.org/" target="_blank" rel="noopener">http://rexify.org/</a> 次选Ansible <a href="http://ansible.cc/" target="_blank" rel="noopener">http://ansible.cc/</a></li></ul><h2 id="Docker-gt-Vagrant"><a href="#Docker-gt-Vagrant" class="headerlink" title="Docker &gt; Vagrant"></a>Docker &gt; Vagrant</h2><p>那针对国内可以流畅使用docker但无法正常使用vagrant的情况，作如何处理呢？</p><p>我们团队的解决方案是将服务器部署的docker编排脚本(docker-compose)直接修改参数以适应Local开发。每次开发前，docker-compose up -d，再配以各类脚本。结果是，这样开发起来比在硅谷用Vagrant还要爽！！Vagrant所有的操作都可以用在docker中一样做，例如:<br>复制文件: vagrant scp; docker cp<br>ssh: vagrant ssh; docker-compose exec CONTAINER /bin/sh<br>所以，到最后，我们发现，开发部署都用docker还有一个额外好处，vagrant的开发环境到部署环境还是存在差异的，而我们开发用的起docker集群的编排脚本无需经过调试直接复制到服务器端就能一行命令解决部署:<br>docker-compose up -d</p><p>What you developed is what will be deployed. 谢谢!</p><p>作者：大杰哥<br>链接：<a href="https://www.zhihu.com/question/32324376/answer/123239426" target="_blank" rel="noopener">https://www.zhihu.com/question/32324376/answer/123239426</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DevOps技术相关&quot;&gt;&lt;a href=&quot;#DevOps技术相关&quot; class=&quot;headerlink&quot; title=&quot;DevOps技术相关&quot;&gt;&lt;/a&gt;DevOps技术相关&lt;/h1&gt;&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;head
      
    
    </summary>
    
      <category term="devtech" scheme="http://wind13.github.io/categories/devtech/"/>
    
    
      <category term="DevOps" scheme="http://wind13.github.io/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>DB, SQL 技术相关</title>
    <link href="http://wind13.github.io/2016/12/18/db-collection/"/>
    <id>http://wind13.github.io/2016/12/18/db-collection/</id>
    <published>2016-12-18T00:00:00.000Z</published>
    <updated>2016-12-17T19:14:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DB-SQL-技术相关"><a href="#DB-SQL-技术相关" class="headerlink" title="DB, SQL 技术相关"></a>DB, SQL 技术相关</h1><h2 id="Presto（中文站）是一个运行在多台服务器上的分布式系统。"><a href="#Presto（中文站）是一个运行在多台服务器上的分布式系统。" class="headerlink" title="Presto（中文站）是一个运行在多台服务器上的分布式系统。"></a><a href="https://prestodb.io/" target="_blank" rel="noopener">Presto</a>（<a href="http://prestodb-china.com/overview.html" target="_blank" rel="noopener">中文站</a>）是一个运行在多台服务器上的分布式系统。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DB-SQL-技术相关&quot;&gt;&lt;a href=&quot;#DB-SQL-技术相关&quot; class=&quot;headerlink&quot; title=&quot;DB, SQL 技术相关&quot;&gt;&lt;/a&gt;DB, SQL 技术相关&lt;/h1&gt;&lt;h2 id=&quot;Presto（中文站）是一个运行在多台服务器上的分布式
      
    
    </summary>
    
      <category term="devtech" scheme="http://wind13.github.io/categories/devtech/"/>
    
    
      <category term="DB" scheme="http://wind13.github.io/tags/DB/"/>
    
      <category term="SQL" scheme="http://wind13.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Angular 2 相关学习</title>
    <link href="http://wind13.github.io/2016/11/08/learn-angular-v2/"/>
    <id>http://wind13.github.io/2016/11/08/learn-angular-v2/</id>
    <published>2016-11-08T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>I18n <a href="https://angular.io/docs/ts/latest/cookbook/i18n.html" target="_blank" rel="noopener">官方文档如此</a>{:target=”_blank”}，目前的解决方案似乎很麻烦。</li><li><a href="https://www.sitepoint.com/angular-2-components-inputs-outputs/" target="_blank" rel="noopener">Angular 2 Components: Inputs and Outputs</a>{:target=”_blank”}</li><li><a href="https://angular.io/docs/ts/latest/guide/pipes.html" target="_blank" rel="noopener">The impure AsyncPipe</a>{:target=”_blank”}</li><li><a href="http://asdfblog.com/angular2-pipes.html" target="_blank" rel="noopener">Angular2 管道（pipes）</a>{:target=”_blank”}</li><li><a href="http://www.cnblogs.com/Answer1215/p/5308130.html" target="_blank" rel="noopener">[Angular 2] Build a select dropdown with *ngFor in Angular 2</a>{:target=”_blank”}</li><li><a href="https://www.impressivewebs.com/javascript-array-methods-reference/" target="_blank" rel="noopener">JavaScript Array Methods Reference</a>{:target=”_blank”}</li><li><a href="https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc" target="_blank" rel="noopener">JavaScript Modules: A Beginner’s Guide</a>{:target=”_blank”}</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;I18n &lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/i18n.ht
      
    
    </summary>
    
      <category term="devtech/js" scheme="http://wind13.github.io/categories/devtech-js/"/>
    
    
      <category term="angular" scheme="http://wind13.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Ionic 2 相关学习</title>
    <link href="http://wind13.github.io/2016/11/08/learn-ionic-v2/"/>
    <id>http://wind13.github.io/2016/11/08/learn-ionic-v2/</id>
    <published>2016-11-08T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="http://rainey.space/2016/04/06/Ionic2_Chinese_Document/" target="_blank" rel="noopener">ionic2文档整理</a></li><li><a href="http://www.joshmorony.com/a-guide-to-styling-an-ionic-2-application/" target="_blank" rel="noopener">A Guide to Styling an Ionic 2 Application</a></li><li><a href="http://www.joshmorony.com/tips-tricks-for-styling-ionic-2-applications/" target="_blank" rel="noopener">Tips &amp; Tricks for Styling Ionic 2 Applications</a></li><li><a href="https://webcake.co/theming-an-ionic-2-application/" target="_blank" rel="noopener">User-Selected Style Themes in an Ionic 2 Application</a></li><li><a href="http://im.dahoo.wang/2016/12/03/Vonic%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E8%B5%B7%E6%AD%A5/" target="_blank" rel="noopener">Vonic简明教程（一）：起步</a>{:target=”_blank”}</li><li><a href="https://github.com/litehelpers/Cordova-sqlite-storage" target="_blank" rel="noopener">SQLite plugin</a>{:target=”_blank”}</li><li><a href="https://github.com/TheCocoaProject/cordova-plugin-nativestorage" target="_blank" rel="noopener">Cordova plugin NativeStorage</a>{:target=”_blank”}</li><li><a href="http://www.damirscorner.com/blog/posts/20161122-DebuggingIonic2AppsInChromeFromVisualStudioCode.html" target="_blank" rel="noopener">Debugging Ionic 2 Apps in Chrome from Visual Studio Code</a>{:target=”_blank”}</li><li><a href="https://github.com/driftyco/ionic-conference-app" target="_blank" rel="noopener">Ionic 2 Conference Application</a>{:target=”_blank”}</li><li><a href="https://ionicallyspeaking.com/" target="_blank" rel="noopener">Ionically Speaking</a>{:target=”_blank”}</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>I18n <a href="http://ionicframework.com/docs/v2/resources/ng2-translate/" target="_blank" rel="noopener">官方文档如此</a>{:target=”_blank”}，<br>使用<a href="https://github.com/ocombe/ng2-translate" target="_blank" rel="noopener">ng2-translate</a>{:target=”_blank”}库实现。</li><li>Angular2 debug tool: <a href="https://augury.angular.io/" target="_blank" rel="noopener">Augury</a>{:target=”_blank”}</li><li><a href="http://stackoverflow.com/questions/39739979/form-validation-is-not-working-with-angular-2-formbuilder-in-ionic-2" target="_blank" rel="noopener">Form validation is not working with Angular 2 FormBuilder in Ionic 2</a>{:target=”_blank”}</li><li><a href="http://stackoverflow.com/questions/39674718/checkbox-group-handling-and-validation-in-angular2/39736803" target="_blank" rel="noopener">Checkbox Group handling and Validation in Angular2</a>{:target=”_blank”}</li><li><a href="http://www.cnblogs.com/yanxiaodi/p/5750860.html" target="_blank" rel="noopener">ionic2+angular2中踩的那些坑</a>{:target=”_blank”}</li><li><a href="http://stackoverflow.com/questions/37618000/ionic-2-getting-data-from-php-services-is-undefined/37650922" target="_blank" rel="noopener">(Ionic 2) Getting data from php services is undefined</a></li><li><a href="http://ionichina.com/topic/54f051698cbbaa7a56a49f98" target="_blank" rel="noopener">解决 ionic 中的 CORS（跨域） 问题</a>{:target=”_blank”}</li><li>报以下错误，是因为 providers 填错了，应该只填 Service：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">metadata_resolver.js:499 Uncaught Error: Can&apos;t resolve all parameters for Project: (?, ?).</span><br><span class="line">    at CompileMetadataResolver.getDependenciesMetadata (http://localhost:8100/build/main.js:23905:19)</span><br><span class="line">    at CompileMetadataResolver.getTypeMetadata (http://localhost:8100/build/main.js:23806:26)</span><br><span class="line">    at http://localhost:8100/build/main.js:23949:41</span><br><span class="line">    at Array.forEach (native)</span><br><span class="line">    at CompileMetadataResolver.getProvidersMetadata (http://localhost:8100/build/main.js:23929:19)</span><br><span class="line">    at CompileMetadataResolver.getDirectiveMetadata (http://localhost:8100/build/main.js:23569:34)</span><br><span class="line">    at http://localhost:8100/build/main.js:23674:49</span><br><span class="line">    at Array.forEach (native)</span><br><span class="line">    at CompileMetadataResolver.getNgModuleMetadata (http://localhost:8100/build/main.js:23668:49)</span><br><span class="line">    at RuntimeCompiler._compileComponents (http://localhost:8100/build/main.js:39512:47)</span><br></pre></td></tr></table></figure><p>如，将：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'page-prj-detail'</span>,</span><br><span class="line">  templateUrl: <span class="string">'prj-detail.html'</span>,</span><br><span class="line">  providers: [Project]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'page-prj-detail'</span>,</span><br><span class="line">  templateUrl: <span class="string">'prj-detail.html'</span>,</span><br><span class="line">  providers: [ProjectService]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遇到这个错误，可能是html界面的方法与ts中的方法对不上。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">polyfills.js:3 Uncaught TypeError: exceptionHandler.handleError is not a function</span><br><span class="line">at Object.next (http://localhost:8100/build/main.js:26130:82)</span><br><span class="line">    at SafeSubscriber.schedulerFn [as _next] (http://localhost:8100/build/main.js:27643:52)</span><br><span class="line">    at SafeSubscriber.__tryOrUnsub (http://localhost:8100/build/main.js:9761:16)</span><br><span class="line">    at SafeSubscriber.next (http://localhost:8100/build/main.js:9710:22)</span><br><span class="line">    at Subscriber._next (http://localhost:8100/build/main.js:9663:26)</span><br><span class="line">    at Subscriber.next (http://localhost:8100/build/main.js:9627:18)</span><br><span class="line">    at EventEmitter.Subject.next (http://localhost:8100/build/main.js:11949:25)</span><br><span class="line">    at EventEmitter.emit (http://localhost:8100/build/main.js:27635:76)</span><br><span class="line">    at NgZone.triggerError (http://localhost:8100/build/main.js:28451:76)</span><br><span class="line">    at Object.onHandleError (http://localhost:8100/build/main.js:28430:23)</span><br></pre></td></tr></table></figure><ul><li>编译时遇到这个错误：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[23:13:04]  Error: Error at [project path]/.tmp/pages/statis/projects.ngfactory.ts:351:29</span><br><span class="line">[23:13:04]  Supplied parameters do not match any signature of call target.</span><br><span class="line">[23:13:04]  ngc failed</span><br><span class="line">[23:13:04]  ionic-app-script task: &quot;build&quot;</span><br><span class="line">[23:13:04]  Error: Error</span><br></pre></td></tr></table></figure><p>一般说明在程序的某处有个方法需求的参数与提供的参数对应不上，在build时无法通过，但在ionic serve时可正常运行，这个错误就比较难找了。这里注意看错误提示，说的是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.tmp/pages/statis/projects.ngfactory.ts</span><br></pre></td></tr></table></figure><p>那么就去检查 /pages/statis/projects.ts 文件中的相应方法的参数吧！</p><ul><li><p>编译时遇到这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Execution failed for task &apos;:packageDebug&apos;.</span><br><span class="line">&gt; java.io.FileNotFoundException: /Users/samliu/gits/jing-xi-h5/platforms/android/build/intermediates/assets/debug/www/assets/stub (Is a directory)</span><br></pre></td></tr></table></figure></li></ul><p>这个错误原因不明，但通常再次编译运行就好了。</p><ul><li>调试时遇到这个错误：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Application Error</span><br><span class="line">There was a network error (http://192.168.56.1)</span><br></pre></td></tr></table></figure><p>网上查到答案是要添加<a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-whitelist/" target="_blank" rel="noopener">whitelist的插件</a>{:target=”_blank”}，然后添加相应的网址到config.xml中。</p><ul><li>发现这个错误，一般是 queries.sql 里面的SQL写错了。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Can not issue data manipulation statements with executeQuery()</span><br></pre></td></tr></table></figure><p>原因是修改性的SQL语句，上面的声明要用“!”，而不能用“?”。</p><ul><li><p>遇到这个错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> Can&apos;t bind to &apos;ngShow&apos; since it isn&apos;t a known property of &apos;ion-list&apos;.</span><br><span class="line">1. If &apos;ion-list&apos; is an Angular component and it has &apos;ngShow&apos; input, then verify that it is part of this module.</span><br><span class="line">2. If &apos;ion-list&apos; is a Web Component then add &quot;CUSTOM_ELEMENTS_SCHEMA&quot; to the &apos;@NgModule.schemas&apos; of this component to suppress this message.</span><br></pre></td></tr></table></figure></li></ul><p>应该是说 ngShow 并不支持这样的写法，后改为 <code>*ngIf</code>即可。</p><ul><li><p>遇到这个错：Can’t coerce body of type class java.lang.Integer</p><p>是因为返回的数据不是json，比如直接将db操作的update结果1返回给客户端，这里(ok 1)就会报这个错，改为：(ok {:success 1}) 即可。</p></li></ul><ul><li>遇到这个错：Unable to find localabstract name of cordova app</li></ul><p>参考<a href="https://github.com/Microsoft/vscode-cordova/issues/215#issuecomment-266093077" target="_blank" rel="noopener">此回复</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim .vscode/extensions/vsmobile.cordova-tools-1.2.4/out/src/debugger/cordovaDebugAdapter.js</span><br></pre></td></tr></table></figure><p>在 254 行，修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// if (socketsInodes.indexOf(parseInt(fields[6], 10)) === -1) &#123;</span><br><span class="line">if (pathField.indexOf(pid) === -1) &#123;</span><br><span class="line">    continue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rainey.space/2016/04/06/Ionic2_Chinese_Document/
      
    
    </summary>
    
      <category term="devtech/js" scheme="http://wind13.github.io/categories/devtech-js/"/>
    
    
      <category term="angular" scheme="http://wind13.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>李笑来《把时间当朋友》笔记</title>
    <link href="http://wind13.github.io/2016/10/08/time-friend-lixiaolai/"/>
    <id>http://wind13.github.io/2016/10/08/time-friend-lixiaolai/</id>
    <published>2016-10-08T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是心智"><a href="#什么是心智" class="headerlink" title="什么是心智"></a>什么是心智</h2><p>一个人的心智，就是其过往获得的一切知识及经验的总和，包括基于这些知识和经验造就的思考方法、思考模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是心智&quot;&gt;&lt;a href=&quot;#什么是心智&quot; class=&quot;headerlink&quot; title=&quot;什么是心智&quot;&gt;&lt;/a&gt;什么是心智&lt;/h2&gt;&lt;p&gt;一个人的心智，就是其过往获得的一切知识及经验的总和，包括基于这些知识和经验造就的思考方法、思考模式。&lt;/p&gt;

      
    
    </summary>
    
      <category term="manage" scheme="http://wind13.github.io/categories/manage/"/>
    
    
      <category term="李笑来" scheme="http://wind13.github.io/tags/%E6%9D%8E%E7%AC%91%E6%9D%A5/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序相关学习</title>
    <link href="http://wind13.github.io/2016/09/24/weixin-xiao-cheng-xu/"/>
    <id>http://wind13.github.io/2016/09/24/weixin-xiao-cheng-xu/</id>
    <published>2016-09-24T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收集链接"><a href="#收集链接" class="headerlink" title="收集链接"></a>收集链接</h2><ul><li><a href="https://github.com/Aufree/awesome-wechat-weapp/blob/master/README.md" target="_blank" rel="noopener">微信小应用资源汇总整理</a>{:target=”_blank”}</li><li><a href="https://segmentfault.com/a/1190000006980941" target="_blank" rel="noopener">开发微信小程序入门前</a>{:target=”_blank”}</li><li><a href="https://mp.weixin.qq.com/debug/wxadoc/design/" target="_blank" rel="noopener">微信小程序设计指南</a>{:target=”_blank”}</li><li><a href="http://css.doyoe.com/" target="_blank" rel="noopener">CSS参考手册</a>{:target=”_blank”}</li><li><a href="http://gold.xitu.io/entry/57e34d6bd2030900691e9ad7" target="_blank" rel="noopener">首个微信小程序开发教程！</a>{:target=”_blank”}</li><li><a href="https://mp.weixin.qq.com/debug/wxadoc/dev/?t=1474644089359" target="_blank" rel="noopener">微信小程序简易教程</a>{:target=”_blank”}</li><li><a href="http://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html" target="_blank" rel="noopener">微信web开发者工具</a>{:target=”_blank”}</li><li><a href="http://mp.weixin.qq.com/s?__biz=MzAwNjMzOTU4Mg==&amp;mid=2650540030&amp;idx=1&amp;sn=ee44ecdfa21ec2a423e640d755efbd3d&amp;chksm=8306496fb471c079fcc1b6a136c362ea7e133e8a3832044b27778df17b7ca48e135fb632d827&amp;scene=1&amp;srcid=0924wMyuh4B9aAK3x2D3J30A#rd" target="_blank" rel="noopener">微信小程序分享1：开发环境的配置</a>{:target=”_blank”}</li><li><a href="https://github.com/lypeer/wechat-weapp-gank" target="_blank" rel="noopener">wechat-weapp-gank 一个图片App示例</a>{:target=”_blank”}</li><li><a href="https://github.com/MeCKodo/wxapp-cli" target="_blank" rel="noopener">wxapp-cli: 一个简单的微信小程序的小（jiao）手架</a>{:target=”_blank”}</li><li><a href="https://segmentfault.com/a/1190000007006479" target="_blank" rel="noopener">通过微信小程序看前端</a>{:target=”_blank”}</li></ul><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>rpx 是微信定义的像素单位，动态布局标量。</li><li><p>执行顺序： App Launch–&gt;App Show–&gt;onLoad–&gt;onShow–&gt;onReady。</p><ul><li>App.onLaunch</li><li>App.onShow</li><li>index.onLoad（首次）</li><li>index.onShow（由App.onShow驱动）</li><li><p>index.onReady（我准备好互动了，可以操作了）</p></li><li><p>进入后台时：</p><ul><li>app.onHide</li><li>index.onHide</li></ul></li><li><p>恢复前台显示时：</p><ul><li>app.onShow</li><li>index.onShow</li></ul></li></ul></li><li><p><a href="https://segmentfault.com/a/1190000006980941#articleHeader2" target="_blank" rel="noopener">破解方法</a>{:target=”_blank”} （测试发现有问题，不能用。）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;收集链接&quot;&gt;&lt;a href=&quot;#收集链接&quot; class=&quot;headerlink&quot; title=&quot;收集链接&quot;&gt;&lt;/a&gt;收集链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Aufree/awesome-wechat-weapp/
      
    
    </summary>
    
      <category term="devtech/js" scheme="http://wind13.github.io/categories/devtech-js/"/>
    
    
  </entry>
  
  <entry>
    <title>4clojure problem solving</title>
    <link href="http://wind13.github.io/2016/09/20/4clojure-problem-solving/"/>
    <id>http://wind13.github.io/2016/09/20/4clojure-problem-solving/</id>
    <published>2016-09-20T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>14 题以前答案一般没啥区别，略过……</p><h3 id="15"><a href="#15" class="headerlink" title="#15"></a><a href="http://www.4clojure.com/problem/15" target="_blank" rel="noopener">#15</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(* % 2)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 2</span><br></pre></td></tr></table></figure><h3 id="16"><a href="#16" class="headerlink" title="#16"></a><a href="http://www.4clojure.com/problem/16" target="_blank" rel="noopener">#16</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format "Hello, %s!"</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(str "Hello, " % "!")</span><br></pre></td></tr></table></figure><h3 id="17"><a href="#17" class="headerlink" title="#17"></a><a href="http://www.4clojure.com/problem/17" target="_blank" rel="noopener">#17</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'(6 7 8)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h3 id="18"><a href="#18" class="headerlink" title="#18"></a><a href="http://www.4clojure.com/problem/18" target="_blank" rel="noopener">#18</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'(6 7)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'(6 7)</span><br></pre></td></tr></table></figure><h3 id="19"><a href="#19" class="headerlink" title="#19"></a><a href="http://www.4clojure.com/problem/19" target="_blank" rel="noopener">#19</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(peek (vec %))</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">comp</span></span> first reverse)</span><br></pre></td></tr></table></figure><h3 id="20"><a href="#20" class="headerlink" title="#20"></a><a href="http://www.4clojure.com/problem/20" target="_blank" rel="noopener">#20</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(nth (reverse %) 1)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">comp</span></span> second reverse)</span><br></pre></td></tr></table></figure><h3 id="21"><a href="#21" class="headerlink" title="#21"></a><a href="http://www.4clojure.com/problem/21" target="_blank" rel="noopener">#21</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> getn [ary n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">0</span>)</span><br><span class="line">    (<span class="name"><span class="builtin-name">first</span></span> ary)</span><br><span class="line">    (<span class="name">getn</span> (<span class="name"><span class="builtin-name">rest</span></span> ary) (<span class="name"><span class="builtin-name">dec</span></span> n))))</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(first (drop %2 %1))</span><br></pre></td></tr></table></figure><h3 id="22"><a href="#22" class="headerlink" title="#22"></a><a href="http://www.4clojure.com/problem/22" target="_blank" rel="noopener">#22</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(reduce (fn [a b] (inc a)) 0 %)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [sequence] (<span class="name"><span class="builtin-name">reduce</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [acc v] (<span class="name"><span class="builtin-name">inc</span></span> acc)) <span class="number">0</span> sequence))</span><br></pre></td></tr></table></figure><h3 id="23"><a href="#23" class="headerlink" title="#23"></a><a href="http://www.4clojure.com/problem/23" target="_blank" rel="noopener">#23</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(reduce (fn [rs ls] (cons ls rs)) [] %)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [s]</span><br><span class="line">  (<span class="name"><span class="builtin-name">loop</span></span> [result []</span><br><span class="line">         s s]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">seq</span></span> s)</span><br><span class="line">      (<span class="name"><span class="builtin-name">recur</span></span> (<span class="name"><span class="builtin-name">concat</span></span> [(<span class="name"><span class="builtin-name">first</span></span> s)] result) (<span class="name"><span class="builtin-name">rest</span></span> s))</span><br><span class="line">      result)))</span><br></pre></td></tr></table></figure><h3 id="24"><a href="#24" class="headerlink" title="#24"></a><a href="http://www.4clojure.com/problem/24" target="_blank" rel="noopener">#24</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(reduce + %)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply +</span><br></pre></td></tr></table></figure><h3 id="25"><a href="#25" class="headerlink" title="#25"></a><a href="http://www.4clojure.com/problem/25" target="_blank" rel="noopener">#25</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(filter odd? %)</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter odd?</span><br></pre></td></tr></table></figure><h3 id="26"><a href="#26" class="headerlink" title="#26"></a><a href="http://www.4clojure.com/problem/26" target="_blank" rel="noopener">#26</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#(take % ((fn fib [a b]</span><br><span class="line">            (lazy-seq (cons a (fib b (+ b a))))) 1 1))</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#(take %</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> first</span><br><span class="line">    (<span class="name"><span class="builtin-name">iterate</span></span> (<span class="name"><span class="builtin-name">fn</span></span> [[i1 i2]]</span><br><span class="line">      [i2 (<span class="name"><span class="builtin-name">+</span></span> i1 i2)])</span><br><span class="line">      [1 1])))</span><br></pre></td></tr></table></figure><h3 id="29"><a href="#29" class="headerlink" title="#29"></a><a href="http://www.4clojure.com/problem/29" target="_blank" rel="noopener">#29</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(clojure.string/replace % #"[^A-Z]" "")</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [s] (<span class="name"><span class="builtin-name">reduce</span></span> str (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name">Character/isUpperCase</span> %) s)))</span><br></pre></td></tr></table></figure><h3 id="27"><a href="#27" class="headerlink" title="#27"></a><a href="http://www.4clojure.com/problem/27" target="_blank" rel="noopener">#27</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(= (reverse %) (seq %))</span><br></pre></td></tr></table></figure><h3 id="28"><a href="#28" class="headerlink" title="#28"></a><a href="http://www.4clojure.com/problem/28" target="_blank" rel="noopener">#28</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> cci [ls r]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name">every?</span> sequential? ls)</span><br><span class="line">    (<span class="name"><span class="builtin-name">concat</span></span> r ls)</span><br><span class="line">    (<span class="name"><span class="builtin-name">apply</span></span> cci r (<span class="name">partition-by</span> sequential? ls))))</span><br><span class="line"></span><br><span class="line">#(let [f (first %)]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">sequential?</span></span> f)</span><br><span class="line">    )</span><br><span class="line">  conj [] (first %))</span><br></pre></td></tr></table></figure><h3 id="30"><a href="#30" class="headerlink" title="#30"></a><a href="http://www.4clojure.com/problem/30" target="_blank" rel="noopener">#30</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#((fn dis [ss l r]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if-let</span></span> [f (<span class="name"><span class="builtin-name">first</span></span> ss)]</span><br><span class="line">      (<span class="name"><span class="builtin-name">let</span></span> [rss (<span class="name"><span class="builtin-name">rest</span></span> ss)]</span><br><span class="line">      (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> l f)</span><br><span class="line">        (<span class="name">dis</span> rss f r)</span><br><span class="line">        (<span class="name">dis</span> rss f (<span class="name"><span class="builtin-name">conj</span></span> r f))))</span><br><span class="line">      r)) % nil [])</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#((fn dis [ss l r]</span><br><span class="line">    (<span class="name"><span class="builtin-name">let</span></span> [[f &amp; s] ss]</span><br><span class="line">      (<span class="name"><span class="builtin-name">cond</span></span></span><br><span class="line">        (<span class="name"><span class="builtin-name">nil?</span></span> f) r</span><br><span class="line">        (<span class="name"><span class="builtin-name">=</span></span> l f) (<span class="name">dis</span> s f r)</span><br><span class="line">        :else (dis s f (conj r f))))) % nil [])</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(map first (partition-by identity %))</span><br></pre></td></tr></table></figure><h3 id="32"><a href="#32" class="headerlink" title="#32"></a><a href="http://www.4clojure.com/problem/32" target="_blank" rel="noopener">#32</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(mapcat (fn [s] [s s]) %)</span><br></pre></td></tr></table></figure><h3 id="34"><a href="#34" class="headerlink" title="#34"></a><a href="http://www.4clojure.com/problem/34" target="_blank" rel="noopener">#34</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#((fn rng [s n r]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&lt;</span></span> s n)</span><br><span class="line">      (<span class="name">rng</span> (<span class="name"><span class="builtin-name">inc</span></span> s) n (<span class="name"><span class="builtin-name">conj</span></span> r s))</span><br><span class="line">      r)) %1 %2 [])</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [start end] (<span class="name"><span class="builtin-name">take-while</span></span> #(<span class="name"><span class="builtin-name">&lt;</span></span> % end)</span><br><span class="line">                            (<span class="name"><span class="builtin-name">iterate</span></span> inc start)</span><br><span class="line">                            )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></p><h3 id="35"><a href="#35" class="headerlink" title="#35"></a><a href="http://www.4clojure.com/problem/35" target="_blank" rel="noopener">#35</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="37"><a href="#37" class="headerlink" title="#37"></a><a href="http://www.4clojure.com/problem/37" target="_blank" rel="noopener">#37</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ABC"</span></span><br></pre></td></tr></table></figure><h3 id="38"><a href="#38" class="headerlink" title="#38"></a><a href="http://www.4clojure.com/problem/38" target="_blank" rel="noopener">#38</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [&amp; s] (<span class="name"><span class="builtin-name">reduce</span></span> (<span class="name"><span class="builtin-name">fn</span></span> mx [a b] (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> a b) a b)) s))</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [ &amp; xs ]</span><br><span class="line">  (<span class="name"><span class="builtin-name">reduce</span></span> #(<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> %<span class="number">1</span> %<span class="number">2</span>) %<span class="number">1</span> %<span class="number">2</span>) xs))</span><br></pre></td></tr></table></figure><h3 id="39"><a href="#39" class="headerlink" title="#39"></a><a href="http://www.4clojure.com/problem/39" target="_blank" rel="noopener">#39</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> l [a b &amp; r]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">nil?</span></span> (<span class="name"><span class="builtin-name">first</span></span> a)) (<span class="name"><span class="builtin-name">nil?</span></span> (<span class="name"><span class="builtin-name">first</span></span> b)))</span><br><span class="line">    (<span class="name"><span class="builtin-name">flatten</span></span> r)</span><br><span class="line">    (<span class="name">l</span> (<span class="name"><span class="builtin-name">rest</span></span> a) (<span class="name"><span class="builtin-name">rest</span></span> b) (<span class="name"><span class="builtin-name">conj</span></span> (<span class="name"><span class="builtin-name">vec</span></span> r) (<span class="name"><span class="builtin-name">first</span></span> a) (<span class="name"><span class="builtin-name">first</span></span> b)))))</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [s1 s2]</span><br><span class="line">  (<span class="name"><span class="builtin-name">flatten</span></span> (<span class="name"><span class="builtin-name">map</span></span> list s1 s2)))</span><br></pre></td></tr></table></figure></p><h3 id="40"><a href="#40" class="headerlink" title="#40"></a><a href="http://www.4clojure.com/problem/40" target="_blank" rel="noopener">#40</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [x ys] (<span class="name"><span class="builtin-name">butlast</span></span> (<span class="name"><span class="builtin-name">flatten</span></span> (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">list</span></span> % x) ys))))</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(butlast (interleave %2 (repeat %1)))</span><br></pre></td></tr></table></figure></p><h3 id="41"><a href="#41" class="headerlink" title="#41"></a><a href="http://www.4clojure.com/problem/41" target="_blank" rel="noopener">#41</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [ls n]</span><br><span class="line">  (<span class="name">keep-indexed</span> #(<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name"><span class="builtin-name">mod</span></span> (<span class="name"><span class="builtin-name">inc</span></span> %<span class="number">1</span>) n) <span class="number">0</span>) %<span class="number">2</span>) ls))</span><br></pre></td></tr></table></figure><p>adereth’s solution:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [coll n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">-&gt;&gt;</span></span> (<span class="name">partition-all</span> n coll)</span><br><span class="line">       (<span class="name"><span class="builtin-name">map</span></span> (<span class="name"><span class="builtin-name">partial</span></span> take (<span class="name"><span class="builtin-name">dec</span></span> n)))</span><br><span class="line">       (<span class="name"><span class="builtin-name">flatten</span></span>)))</span><br></pre></td></tr></table></figure><h3 id="42"><a href="#42" class="headerlink" title="#42"></a><a href="http://www.4clojure.com/problem/42" target="_blank" rel="noopener">#42</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#((fn factorial [n r]</span><br><span class="line">  (if (= n 1) r (factorial (dec n) (* n r)))) % 1)</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(reduce * (range 1 (inc %)))</span><br></pre></td></tr></table></figure></p><h3 id="48"><a href="#48" class="headerlink" title="#48"></a><a href="http://www.4clojure.com/problem/48" target="_blank" rel="noopener">#48</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="52"><a href="#52" class="headerlink" title="#52"></a><a href="http://www.4clojure.com/problem/52" target="_blank" rel="noopener">#52</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[c e]</span><br></pre></td></tr></table></figure><h3 id="57"><a href="#57" class="headerlink" title="#57"></a><a href="http://www.4clojure.com/problem/57" target="_blank" rel="noopener">#57</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'(5 4 3 2 1)</span><br></pre></td></tr></table></figure><h3 id="64"><a href="#64" class="headerlink" title="#64"></a><a href="http://www.4clojure.com/problem/64" target="_blank" rel="noopener">#64</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+</span><br></pre></td></tr></table></figure><h3 id="71"><a href="#71" class="headerlink" title="#71"></a><a href="http://www.4clojure.com/problem/71" target="_blank" rel="noopener">#71</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">last</span><br></pre></td></tr></table></figure><h3 id="68"><a href="#68" class="headerlink" title="#68"></a><a href="http://www.4clojure.com/problem/68" target="_blank" rel="noopener">#68</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'(7 6 5 4 3)</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><h3 id="72"><a href="#72" class="headerlink" title="#72"></a><a href="http://www.4clojure.com/problem/72" target="_blank" rel="noopener">#72</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply +</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(reduce + %)</span><br></pre></td></tr></table></figure></p><h3 id="134"><a href="#134" class="headerlink" title="#134"></a><a href="http://www.4clojure.com/problem/134" target="_blank" rel="noopener">#134</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(= nil (get %2 %1 0))</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(nil? (get %2 % true))</span><br></pre></td></tr></table></figure></p><h3 id="145"><a href="#145" class="headerlink" title="#145"></a><a href="http://www.4clojure.com/problem/145" target="_blank" rel="noopener">#145</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">5</span> <span class="number">9</span> <span class="number">13</span> <span class="number">17</span> <span class="number">21</span> <span class="number">25</span> <span class="number">29</span> <span class="number">33</span> <span class="number">37</span>]</span><br></pre></td></tr></table></figure><h3 id="156"><a href="#156" class="headerlink" title="#156"></a><a href="http://www.4clojure.com/problem/156" target="_blank" rel="noopener">#156</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(apply merge (map (fn [k] &#123;k %1&#125;) %2))</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#(apply array-map (mapcat (fn [k] [k %1]) %2))</span><br></pre></td></tr></table></figure><p>adereth’s solution:<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">fn</span></span> [default values] (<span class="name"><span class="builtin-name">reduce</span></span> #(<span class="name"><span class="builtin-name">assoc</span></span> %<span class="number">1</span> %<span class="number">2</span> default) &#123;&#125; values))</span><br></pre></td></tr></table></figure></p><h3 id="161"><a href="#161" class="headerlink" title="#161"></a><a href="http://www.4clojure.com/problem/161" target="_blank" rel="noopener">#161</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;1 2&#125;</span><br></pre></td></tr></table></figure><h3 id="162"><a href="#162" class="headerlink" title="#162"></a><a href="http://www.4clojure.com/problem/162" target="_blank" rel="noopener">#162</a></h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Another-solution"><a href="#Another-solution" class="headerlink" title="Another solution"></a>Another solution</h2><p><a href="http://www.anthony-galea.com/blog/post/solutions-to-4clojure-easy-problems/" target="_blank" rel="noopener">Solutions to 4Clojure Easy Problems</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;14 题以前答案一般没啥区别，略过……&lt;/p&gt;
&lt;h3 id=&quot;15&quot;&gt;&lt;a href=&quot;#15&quot; class=&quot;headerlink&quot; title=&quot;#15&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.4clojure.com/problem/15&quot; target=
      
    
    </summary>
    
      <category term="devtech/clojure" scheme="http://wind13.github.io/categories/devtech-clojure/"/>
    
    
  </entry>
  
  <entry>
    <title>《清晰思考的艺术》读书笔记</title>
    <link href="http://wind13.github.io/2016/09/20/the-art-of-clear-thinking-note/"/>
    <id>http://wind13.github.io/2016/09/20/the-art-of-clear-thinking-note/</id>
    <published>2016-09-20T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="幸存偏误"><a href="#幸存偏误" class="headerlink" title="幸存偏误"></a>幸存偏误</h2><p>只（看到、统计）（幸存的、媒体报道的、成功的）（案例、公司、明星）等，而得到错误的结论。</p><p>如：股票指数不能代表一个国家的经济。<br>如：畅销图书和成功教练都值得怀疑。</p><h2 id="游泳选手身材错觉"><a href="#游泳选手身材错觉" class="headerlink" title="游泳选手身材错觉"></a>游泳选手身材错觉</h2><p>在游泳选手和化妆品模特那里，美丽是一种选择标准，而不是结果。</p><p>远离成功自助图书，因为写这些书的人都天生具有快乐倾向。</p><h2 id="过度自信效应"><a href="#过度自信效应" class="headerlink" title="过度自信效应"></a>过度自信效应</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;幸存偏误&quot;&gt;&lt;a href=&quot;#幸存偏误&quot; class=&quot;headerlink&quot; title=&quot;幸存偏误&quot;&gt;&lt;/a&gt;幸存偏误&lt;/h2&gt;&lt;p&gt;只（看到、统计）（幸存的、媒体报道的、成功的）（案例、公司、明星）等，而得到错误的结论。&lt;/p&gt;
&lt;p&gt;如：股票指数不能代表
      
    
    </summary>
    
      <category term="manage" scheme="http://wind13.github.io/categories/manage/"/>
    
    
  </entry>
  
  <entry>
    <title>《用系统来工作》部分摘抄</title>
    <link href="http://wind13.github.io/2016/09/18/system-working/"/>
    <id>http://wind13.github.io/2016/09/18/system-working/</id>
    <published>2016-09-18T00:00:00.000Z</published>
    <updated>2016-09-18T06:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>自立和富足出现在系统建立起来之后。</p><p>你只要暂时把部分时间和精力，投入到有步骤的、一次性的建立过程中，就可以得到长久的自由、富足和宁静。</p><p>第一步是开窍，体验一种觉醒，让你时刻留意人生的各个独立系统。</p><p>一下子理顺人生的零乱杂合状态是不可能的；它无法从整体上治理。整治任何复杂事物都需要一次一个步骤、一次一个部件地进行——绝非是整体做法。</p><p>运作三步曲：</p><ol><li>系统的拆分、剖析和修复：充分揭示、分析，进而完善工作、个人和人际关系各系统；创建新系统，消除那些阻碍你的旧系统。</li><li>文件编制：撰写目标、原则和程序，为你和同事确立行动和决策指导方针。这不是为了让你感觉良好，而是创造效率必须做的。这是一次性重任，但不会花太长时间。如果你有一个团队或部门，你要教他们去做。</li><li>后续的系统维护。给齿轮上油。这很容易。用系统来工作的效果实际而具体，激励人心。你会愉快地监督你的系统，以使其保持高效运转。</li></ol><p>一些概念：</p><ul><li>生意：一个人不必到岗就能赚钱。</li><li>工作或职业：一个人必须到岗才能赚钱。</li><li>项目工程师：生意人或经理的角色，扮演外在系统改进者，而不是内部工作者。</li><li>旁人：在生意人或经理的监督下工作的人。</li></ul><p>我的世界观一直是错的。我不应该企图通过抱怨来改变世界。我能控制的事情微乎其微，所以我要停止为那些力所不及的事情烦恼。</p><p>我下定决心，只在自己能控制的具体事务上花精力，逐步改善我自己和两个依靠我的人的生活。</p><p>没错，专注的工作、优秀的员工、有针对性的营销和一贯高质量的产品都至关重要，但这些不是好转的原因，而是原因的副产物。好转的原因是对原则的发现和应用；领导者必须着眼于改进流程，而非具体执行任务或应急救火。优质产品或服务、稳定的员工队伍和盈利能力，是高质量系统的产物，而不是产生高质量的原因。</p><p>幸福的人和不幸福的人之间有一个非常简单的区别，不幸的人掌控不了自己的人生，只能整天应付不受管理、或管理不善的系统随机产生的坏结果；幸福的人掌控自己的人生，每天都在享受管理良好的系统必然产生的好结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自立和富足出现在系统建立起来之后。&lt;/p&gt;
&lt;p&gt;你只要暂时把部分时间和精力，投入到有步骤的、一次性的建立过程中，就可以得到长久的自由、富足和宁静。&lt;/p&gt;
&lt;p&gt;第一步是开窍，体验一种觉醒，让你时刻留意人生的各个独立系统。&lt;/p&gt;
&lt;p&gt;一下子理顺人生的零乱杂合状态是不可
      
    
    </summary>
    
      <category term="manage" scheme="http://wind13.github.io/categories/manage/"/>
    
    
      <category term="系统" scheme="http://wind13.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>《智能时代》读书笔记</title>
    <link href="http://wind13.github.io/2016/09/18/data-time/"/>
    <id>http://wind13.github.io/2016/09/18/data-time/</id>
    <published>2016-09-18T00:00:00.000Z</published>
    <updated>2018-01-22T17:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-数据——人类建造文明的基石"><a href="#第一章-数据——人类建造文明的基石" class="headerlink" title="第一章 数据——人类建造文明的基石"></a>第一章 数据——人类建造文明的基石</h2><p>使用数据的标准流程：</p><ol><li>获取数据</li><li>分析数据</li><li>建立模型</li><li>预测未知</li></ol><p>完美的镜头里面的透镜其实不应该是球面镜，而应该是某种复杂的曲面，这样才能使画面不变形，但这样的镜头在设计和制作上要求非常复杂而难以实现，相反如同日本的镜头生产一样，采用多个球面透镜来组合虽然显得笨重，但是容易大规模生产，成本也非常低，因此二战后，日本超过德国成为全球光学仪器（包括相机）第一大制造国。</p><p>启发：</p><ul><li>由简单模型组合而成复杂功能的模型；</li><li>可由若干个简单模型逐渐契合数据（Fit Data）的方法称为数据驱动方法。</li></ul><p>大数据的三个特征：</p><ul><li>数据量大</li><li>多维度</li><li>完备性</li></ul><p>熵：</p><ul><li>混乱度，越混乱熵越大。</li><li>如恒温的空气状态。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章-数据——人类建造文明的基石&quot;&gt;&lt;a href=&quot;#第一章-数据——人类建造文明的基石&quot; class=&quot;headerlink&quot; title=&quot;第一章 数据——人类建造文明的基石&quot;&gt;&lt;/a&gt;第一章 数据——人类建造文明的基石&lt;/h2&gt;&lt;p&gt;使用数据的标准流程：
      
    
    </summary>
    
      <category term="manage" scheme="http://wind13.github.io/categories/manage/"/>
    
    
      <category term="大数据" scheme="http://wind13.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
